{"version":3,"sources":["draggable-to-map.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,UAAA,EAAY,YAAA,EAAc,KAAA,EAAc,MAAO,eAAA,CAAgB;AACnF,OAAO,EAAE,qBAAA,EAAsB,MAAO,sCAAA,CAAuC;AA4B7E;IAKE,iCAAY,EAAc,EAAU,eAAsC;QAAtC,oBAAe,GAAf,eAAe,CAAuB;QACxE,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,MAAM,CAAC;QAC7C,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,aAAa,CAAC,GAAG,MAAM,CAAC;QAC/C,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,kBAAkB,CAAC,GAAG,MAAM,CAAC;QACpD,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,mBAAmB,CAAC,GAAG,MAAM,CAAC;QACrD,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,qBAAqB,CAAC,GAAG,MAAM,CAAC;QACvD,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,iBAAiB,CAAC,GAAG,MAAM,CAAC;IACrD,CAAC;IAED,0CAAQ,GAAR;QACE,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,cAAc,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC5C,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC;QACjC,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC;YACnC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;QACzC,CAAC;IACH,CAAC;IAGD,6CAAW,GAAX;QACE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;IACI,kCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,kBAAkB,EAAE,EAAG,EAAE;KAC9D,CAAC;IAEK,sCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;QACpB,EAAC,IAAI,EAAE,qBAAqB,GAAG;KAC9B,EAH6F,CAG7F,CAAC;IACK,sCAAc,GAA2C;QAChE,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACpC,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,WAAW,EAAG,EAAE,EAAE;KAC9D,CAAC;IACF,8BAAC;CAxCD,AAwCC,IAAA;SAxCY,uBAAuB","file":"draggable-to-map.directive.js","sourceRoot":"","sourcesContent":["import { Directive, ElementRef, HostListener, Input, OnInit } from '@angular/core';\r\nimport { DraggableToMapService } from '../services/draggable-to-map.service';\r\n\r\n/**\r\n * This directive is used to allow dragging of icons from outside the map over the map\r\n * while being notified of the dragging position and drop position with an observable exposed from `DraggableToMapService`.\r\n * @Input {src: string, style?: any} | string -\r\n * the [src: string | string] should be the image src of the dragged image.\r\n * The style is an optional style object for the image.\r\n *\r\n * example:\r\n * ```\r\n * <a href=\"...\" class=\"...\" [draggableToMap]=\"{src: '../assets/GitHub-Mark-Light.png', style: {width: '50px', height: '50px'}}\">\r\n *     <img class=\"github\" src=\"../assets/GitHub-Mark-Light.png\">\r\n * </a>\r\n * ```\r\n *\r\n * In order the get notified of the dragging location  and drop state subscribe to `DraggableToMapService.dragUpdates()`\r\n * ```\r\n *  this.iconDragService.dragUpdates().subscribe(e => console.log(e));\r\n * ```\r\n *\r\n * In order the cancel dragging use `DraggableToMapService.cancel()`\r\n * ```\r\n *  this.iconDragService.cancel();\r\n * ```\r\n */\r\n\r\n\r\nexport class DraggableToMapDirective implements OnInit {\r\n   draggableToMap: { src: string, style?: any } | string;\r\n  private src: string;\r\n  private style: any;\r\n\r\n  constructor(el: ElementRef, private iconDragService: DraggableToMapService) {\r\n    el.nativeElement.style['user-drag'] = 'none';\r\n    el.nativeElement.style['user-select'] = 'none';\r\n    el.nativeElement.style['-moz-user-select'] = 'none';\r\n    el.nativeElement.style['-webkit-user-drag'] = 'none';\r\n    el.nativeElement.style['-webkit-user-select'] = 'none';\r\n    el.nativeElement.style['-ms-user-select'] = 'none';\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (typeof this.draggableToMap === 'string') {\r\n      this.src = this.draggableToMap;\r\n    }\r\n    else {\r\n      this.src = this.draggableToMap.src;\r\n      this.style = this.draggableToMap.style;\r\n    }\r\n  }\r\n\r\n  \r\n  onMouseDown() {\r\n    this.iconDragService.drag(this.src, this.style);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{ selector: '[draggableToMap]' }, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: DraggableToMapService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'draggableToMap': [{ type: Input },],\n'onMouseDown': [{ type: HostListener, args: ['mousedown', ] },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}