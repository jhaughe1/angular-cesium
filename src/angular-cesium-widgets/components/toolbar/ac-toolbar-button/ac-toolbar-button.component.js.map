{"version":3,"sources":["ac-toolbar-button.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,uBAAuB,EACvB,SAAS,EACT,YAAY,EACZ,KAAK,EAGL,MAAM,EACP,MAAM,eAAA,CAAgB;AAmBvB;IAcE;QAFA,YAAO,GAAG,IAAI,YAAY,EAAE,CAAC;IAG7B,CAAC;IAED,2CAAQ,GAAR;IAEA,CAAC;IACI,mCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACtB,QAAQ,EAAG,mBAAmB;oBAC9B,QAAQ,EAAG,yOAKV;oBACD,MAAM,EAAG,CAAC,ymBAuBT,CAAC;oBACF,eAAe,EAAG,uBAAuB,CAAC,MAAM;iBACjD,EAAG,EAAE;KACP,CAAC;IAEK,uCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACK,uCAAc,GAA2C;QAChE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC7B,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACjC,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC/B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;KAC7B,CAAC;IACF,+BAAC;CAjED,AAiEC,IAAA;SAjEY,wBAAwB","file":"ac-toolbar-button.component.js","sourceRoot":"","sourcesContent":["import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output\r\n} from '@angular/core';\r\n\r\n/**\r\n * Toolbar button widget, act as a single button inside ac-toolbar component\r\n * Can accepts content components or passing [iconUrl]\r\n * configure with: `[iconUrl]`,`[buttonClass]`,`[iconClass]`,`(onClick)`\r\n *\r\n * Usage:\r\n * ```\r\n * <ac-toolbar [allowDrag]=\"true\">\r\n <ac-toolbar-button [iconUrl]=\"'assets/home-icon.svg'\" (onClick)=\"goHome()\">\r\n </ac-toolbar-button>\r\n <ac-toolbar-button [iconUrl]=\"'assets/explore-icon.svg'\" (onClick)=\"rangeAndBearing()\">\r\n </ac-toolbar-button>\r\n </ac-toolbar>\r\n * ```\r\n *\r\n */\r\n\r\nexport class AcToolbarButtonComponent implements OnInit {\r\n  \r\n  \r\n  iconUrl: string;\r\n  \r\n  \r\n  buttonClass: string;\r\n  \r\n  \r\n  iconClass: string;\r\n  \r\n  \r\n  onClick = new EventEmitter();\r\n  \r\n  constructor() {\r\n  }\r\n  \r\n  ngOnInit() {\r\n  \r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector : 'ac-toolbar-button',\r\n    template : `\r\n        <div (click)=\"onClick.emit()\" class=\"button-container {{buttonClass}}\">\r\n            <img *ngIf=\"iconUrl\" [src]=\"iconUrl\" class=\"icon {{iconClass}}\"/>\r\n            <ng-content></ng-content>\r\n        </div>\r\n    `,\r\n    styles : [`\r\n        .button-container {\r\n            border-radius: 1px;\r\n            background-color: rgba(255, 255, 255, 0.8);\r\n            height: 30px;\r\n            width: 30px;\r\n            padding: 5px;\r\n            transition: all 0.2s;\r\n            cursor: pointer;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            flex-direction: column;\r\n        }\r\n\r\n        .button-container:hover {\r\n            background-color: rgba(255, 255, 255, 0.95);\r\n        }\r\n        \r\n        .icon {\r\n            height: 30px;\r\n            width: 30px;\r\n        }\r\n    `],\r\n    changeDetection : ChangeDetectionStrategy.OnPush,\r\n  }, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'iconUrl': [{ type: Input },],\n'buttonClass': [{ type: Input },],\n'iconClass': [{ type: Input },],\n'onClick': [{ type: Output },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}