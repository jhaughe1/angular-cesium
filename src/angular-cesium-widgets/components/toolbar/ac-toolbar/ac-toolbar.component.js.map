{"version":3,"sources":["ac-toolbar.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,uBAAA,EAAyB,SAAA,EAAW,UAAA,EAAY,KAAA,EAAyB,MAAO,eAAA,CAAgB;AACzG,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAmB7C;IAaE,4BAAoB,OAAmB;QAAnB,YAAO,GAAP,OAAO,CAAY;QATvC,cAAS,GAAG,IAAI,CAAC;QAEjB,cAAS,GAAG;YACV,WAAW,EAAG,EAAE;YAChB,UAAU,EAAG,EAAE;SAChB,CAAC;IAKF,CAAC;IAED,qCAAQ,GAAR;QAAA,iBAcC;QAZC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACnB,IAAM,UAAU,GAAG,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;YACjF,IAAM,YAAU,GAAG,UAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAC/D,IAAM,UAAQ,GAAG,UAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YAE3D,IAAM,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC,cAAM,OAAA,YAAU,CAAC,SAAS,CAAC,UAAQ,CAAC,EAA9B,CAA8B,CAAC,CAAC;YAEzE,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,SAAS,CAAC,UAAC,KAAiB;gBACpD,KAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC;gBACvD,KAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC;YACxD,CAAC,CAAC,CAAA;QACJ,CAAC;IACH,CAAC;IAED,wCAAW,GAAX;QACE,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAA;IACjC,CAAC;IAGI,6BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACtB,QAAQ,EAAG,YAAY;oBACvB,QAAQ,EAAG,oSAUV;oBACD,MAAM,EAAG,CAAC,kNAST,CAAC;oBACF,eAAe,EAAG,uBAAuB,CAAC,MAAM;iBACjD,EAAG,EAAE;KACP,CAAC;IAEK,iCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;KACnB,EAF6F,CAE7F,CAAC;IACK,iCAAc,GAA2C;QAChE,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAClC,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KAC9B,CAAC;IACF,yBAAC;CAxED,AAwEC,IAAA;SAxEY,kBAAkB","file":"ac-toolbar.component.js","sourceRoot":"","sourcesContent":["import { ChangeDetectionStrategy, Component, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {Subscription} from 'rxjs/Subscription';\r\n\r\n/**\r\n * Toolbar widget, act as a container for ac-toolbar-button components\r\n * allowing drag configuration and passing `toolbarClass` as attributes\r\n *\r\n * Usage:\r\n * ```\r\n * <ac-toolbar [allowDrag]=\"true\">\r\n     <ac-toolbar-button [iconUrl]=\"'assets/home-icon.svg'\" (onClick)=\"goHome()\">\r\n     </ac-toolbar-button>\r\n     <ac-toolbar-button [iconUrl]=\"'assets/explore-icon.svg'\" (onClick)=\"rangeAndBearing()\">\r\n     </ac-toolbar-button>\r\n </ac-toolbar>\r\n * ```\r\n *\r\n */\r\n\r\nexport class AcToolbarComponent implements OnInit, OnDestroy {\r\n  \r\n  toolbarClass: string;\r\n  \r\n  allowDrag = true;\r\n  \r\n  dragStyle = {\r\n    'height.px' : 20,\r\n    'width.px' : 20,\r\n  };\r\n  \r\n  private subscription: Subscription;\r\n  \r\n  constructor(private element: ElementRef) {\r\n  }\r\n  \r\n  ngOnInit() {\r\n    \r\n    if (this.allowDrag) {\r\n      const mouseDown$ = Observable.fromEvent(this.element.nativeElement, 'mousedown');\r\n      const mouseMove$ = Observable.fromEvent(document, 'mousemove');\r\n      const mouseUp$ = Observable.fromEvent(document, 'mouseup');\r\n      \r\n      const drag$ = mouseDown$.switchMap(() => mouseMove$.takeUntil(mouseUp$));\r\n      \r\n      this.subscription = drag$.subscribe((event: MouseEvent) => {\r\n        this.element.nativeElement.style.left = event.x + 'px';\r\n        this.element.nativeElement.style.top = event.y + 'px';\r\n      })\r\n    }\r\n  }\r\n  \r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe()\r\n  }\r\n  \r\n  \r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector : 'ac-toolbar',\r\n    template : `\r\n        <div class=\"{{toolbarClass}}\">\r\n            <div *ngIf=\"allowDrag\">\r\n                <ac-toolbar-button>\r\n                    <ac-drag-icon></ac-drag-icon>\r\n                </ac-toolbar-button>\r\n            </div>\r\n\r\n            <ng-content></ng-content>\r\n        </div>\r\n    `,\r\n    styles : [`\r\n        :host {\r\n            position: absolute;\r\n            top: 100px;\r\n            left: 20px;\r\n            width: 20px;\r\n            height: 20px;\r\n            -webkit-user-drag: none;\r\n        }\r\n    `],\r\n    changeDetection : ChangeDetectionStrategy.OnPush,\r\n  }, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'toolbarClass': [{ type: Input },],\n'allowDrag': [{ type: Input },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}