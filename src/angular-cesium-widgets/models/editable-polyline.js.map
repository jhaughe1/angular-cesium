{"version":3,"sources":["editable-polyline.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,uCAAuC,CAAC;AACjE,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AACzC,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAK/C,OAAO,EAAE,eAAe,EAAE,MAAM,2DAA2D,CAAC;AAC5F,OAAO,EAAE,iBAAiB,EAAc,MAAM,eAAe,CAAC;AAE9D;IAAsC,oCAAQ;IAY5C,0BAAoB,EAAU,EACV,WAA6B,EAC7B,cAAgC,EAChC,mBAAwC,EACxC,WAAgC,EACxC,SAAwB;QALpC,YAME,iBAAO,SAMR;QAZmB,QAAE,GAAF,EAAE,CAAQ;QACV,iBAAW,GAAX,WAAW,CAAkB;QAC7B,oBAAc,GAAd,cAAc,CAAkB;QAChC,yBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,iBAAW,GAAX,WAAW,CAAqB;QAf5C,eAAS,GAAgB,EAAE,CAAC;QAE5B,eAAS,GAAmB,EAAE,CAAC;QAE/B,kBAAY,GAAG,KAAK,CAAC;QACrB,iBAAW,GAAG,IAAI,CAAC;QAInB,aAAO,GAAiB,EAAE,CAAC;QASjC,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC,UAAU,CAAC;QAC1C,KAAI,CAAC,KAAK,GAAG,WAAW,CAAC,aAAa,CAAC;QACvC,EAAE,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;YACvC,KAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;QACrC,CAAC;;IACH,CAAC;IAED,sBAAI,oCAAM;aAAV;YACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACtB,CAAC;aAED,UAAW,MAAoB;YAC7B,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACZ,MAAM,CAAC;YACT,CAAC;YACD,IAAM,SAAS,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC1C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,UAAC,KAAK,EAAE,KAAK;gBACrC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACpB,KAAK,CAAC,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;gBACpC,CAAC;gBAED,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,iBAAiB,EAAE,KAAK,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;QACL,CAAC;;;OAdA;IAgBD,sBAAI,mCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC5B,CAAC;aAED,UAAU,KAAoB;YAC5B,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC7B,CAAC;;;OAJA;IAMD,sBAAI,wCAAU;aAAd;YACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QAC1B,CAAC;aAED,UAAe,KAAiB;YAC9B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAC3B,CAAC;;;OAJA;IAMD,sBAAI,wCAAU;aAAd;YACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QAC1B,CAAC;aAED,UAAe,KAAc;YAA7B,iBAMC;YALC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,KAAK;gBAC1B,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;gBACnB,KAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;QACL,CAAC;;;OARA;IAUO,6CAAkB,GAA1B,UAA2B,SAAuB;QAAlD,iBAMC;QALC,SAAS,CAAC,OAAO,CAAC,UAAC,QAAQ;YACzB,KAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAA;QACrC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC/B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC3B,CAAC;IAED,sCAAW,GAAX,UAAY,MAGM,EAAE,aAA6B;QAHjD,iBAyBC;QArBC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACvB,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAA;QACjF,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,EAAlC,CAAkC,CAAC,CAAC;QAEhE,IAAM,SAAS,GAAgB,EAAE,CAAC;QAClC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACvC,IAAM,gBAAgB,GAAQ,MAAM,CAAC,CAAC,CAAC,CAAC;YACxC,IAAI,QAAQ,GAAG,IAAI,CAAC;YACpB,EAAE,CAAC,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC;gBAChC,QAAQ,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,gBAAgB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAC5F,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,QAAQ,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,gBAAgB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YACxE,CAAC;YACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3B,CAAC;QACD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;QAExE,IAAI,CAAC,iBAAiB,OAAtB,IAAI,GAAmB,IAAI,SAAK,IAAI,CAAC,SAAS,GAAE;QAChD,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACjC,CAAC;IAEO,kDAAuB,GAA/B;QAAA,iBAaC;QAZC,IAAM,aAAa,GAAO,IAAI,CAAC,SAAS,QAAC,CAAC;QAC1C,aAAa,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,KAAK;YAC/B,EAAE,CAAC,CAAC,KAAK,KAAK,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACvC,IAAM,YAAY,GAAG,GAAG,CAAC;gBACzB,IAAM,SAAS,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;gBACvD,IAAM,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;gBAE3C,IAAM,QAAQ,GAAG,KAAI,CAAC,qBAAqB,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;gBAErE,KAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YAC1C,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,gDAAqB,GAA7B,UAA8B,MAAiB,EAAE,OAAkB;QACjE,IAAM,WAAW,GAAG,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;QAC5E,IAAM,QAAQ,GAAG,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC;QAC1E,IAAM,kBAAkB,GAAG,IAAI,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAChG,IAAM,QAAQ,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,kBAAkB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9E,QAAQ,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAEnC,IAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAClD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;QACnD,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IAEO,mDAAwB,GAAhC,UAAiC,gBAA2B,EAAE,SAAoB,EAAE,SAAoB;QACtG,IAAM,aAAa,GAAG,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC;QACjF,IAAM,aAAa,GAAG,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC;QACjF,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC,CAAC;IAC5G,CAAC;IAED,wDAA6B,GAA7B,UAA8B,KAAgB;QAC5C,KAAK,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QACjC,IAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;QAC1C,IAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACjD,IAAM,SAAS,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACnD,IAAM,QAAQ,GAAG,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,WAAW,CAAE,GAAG,WAAW,CAAC;QAEjE,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAC5C,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAE1C,IAAM,aAAa,GAAG,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAClE,IAAM,WAAW,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QACjE,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,aAAa,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;IAEnE,CAAC;IAEO,0CAAe,GAAvB;QAAA,iBAaC;QAZC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,EAA5C,CAA4C,CAAC,CAAC;QACjF,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,CAAC,KAAK,CAAC,kBAAkB,EAAE,EAA3B,CAA2B,CAAC,CAAC;QAC/E,UAAU,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,KAAK;YAC9B,EAAE,CAAC,CAAC,KAAK,KAAK,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACpC,IAAM,SAAS,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBAC9B,IAAM,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC;gBACxC,IAAM,QAAQ,GAAG,IAAI,YAAY,CAAC,KAAI,CAAC,EAAE,EAAE,KAAK,CAAC,WAAW,EAAE,EAAE,SAAS,CAAC,WAAW,EAAE,EAAE,KAAI,CAAC,aAAa,CAAC,CAAC;gBAC7G,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC9B,KAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;YACzD,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,+CAAoB,GAApB,UAAqB,QAAoB;QACvC,IAAM,QAAQ,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACpE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9B,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACzC,CAAC;IAGD,mCAAQ,GAAR,UAAS,QAAoB;QAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC;QACT,CAAC;QACD,IAAM,YAAY,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;QAC5C,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACjB,IAAM,UAAU,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YACtE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAChC,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAC3C,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9E,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEtC,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACjD,CAAC;IAED,oCAAS,GAAT,UAAU,UAAsB,EAAE,SAAoB;QACpD,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAClC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACtB,EAAE,CAAC,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;gBACnC,IAAI,CAAC,6BAA6B,CAAC,SAAS,CAAC,CAAC;YAChD,CAAC;YACD,IAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;YAC1C,IAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAErD,EAAE,CAAC,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC3C,IAAM,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC1E,IAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;gBACvE,IAAI,CAAC,wBAAwB,CAAC,gBAAgB,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;gBAC1E,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;YAClD,CAAC;YACD,EAAE,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;gBACnB,IAAM,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,WAAW,CAAE,GAAG,WAAW,CAAC,CAAC;gBACzF,IAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,WAAW,CAAE,GAAG,WAAW,CAAC,CAAC;gBACtF,IAAI,CAAC,wBAAwB,CAAC,gBAAgB,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;gBAC1E,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;YAClD,CAAC;QACH,CAAC;QACD,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAC1C,CAAC;IAED,8CAAmB,GAAnB,UAAoB,UAAsB;QACxC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/C,CAAC;IACH,CAAC;IAED,oCAAS,GAAT,UAAU,mBAA+B,EAAE,iBAA6B;QACtE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC;QACT,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,qBAAqB,GAAG,mBAAmB,CAAC;QACnD,CAAC;QAED,IAAM,KAAK,GAAG,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,qBAAqB,EAAE,iBAAiB,CAAC,CAAC;QAC/F,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,KAAK;YAC1B,eAAe,CAAC,kBAAkB,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,iBAAiB,OAAtB,IAAI,GAAmB,IAAI,SAAK,IAAI,CAAC,SAAS,GAAE;QAChD,IAAI,CAAC,qBAAqB,GAAG,iBAAiB,CAAC;IACjD,CAAC;IAED,uCAAY,GAAZ;QACE,IAAI,CAAC,qBAAqB,GAAG,SAAS,CAAC;QACvC,IAAI,CAAC,iBAAiB,OAAtB,IAAI,GAAmB,IAAI,SAAK,IAAI,CAAC,SAAS,GAAE;IAClD,CAAC;IAED,sCAAW,GAAX,UAAY,aAAwB;QAApC,iBAQC;QAPC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QACnC,IAAI,CAAC,SAAS;aACX,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,kBAAkB,EAAE,EAAtB,CAAsB,CAAC;aACnC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EAAtB,CAAsB,CAAC,CAAC;QACxC,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAE/B,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAED,uCAAY,GAAZ,UAAa,QAAoB;QAC/B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACtC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAExB,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACjC,CAAC;IAED,2CAAgB,GAAhB;QACE,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE;aACxB,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,WAAW,EAAE,EAAtB,CAAsB,CAAC,CAAC;IAC7C,CAAC;IAED,wCAAa,GAAb;QAAA,iBAGC;QAFC,MAAM,CAAC,IAAI,CAAC,SAAS;aAClB,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,CAAC,QAAQ,CAAC,kBAAkB,EAAE,IAAI,QAAQ,KAAK,KAAI,CAAC,WAAW,EAA/D,CAA+D,CAAC,CAAC;IACzF,CAAC;IAED,uCAAY,GAAZ;QACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,WAAW,EAAE,EAAtB,CAAsB,CAAC,CAAC;IAChE,CAAC;IAEO,yCAAc,GAAtB,UAAuB,KAAgB;QACrC,IAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,KAAK,KAAK,EAAX,CAAW,CAAC,CAAC;QAC3D,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;YACd,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAChC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;IACzC,CAAC;IAEO,4CAAiB,GAAzB,UAA0B,eAAsB;QAAhD,iBAKC;QALyB,gCAAA,EAAA,sBAAsB;QAAE,eAAqB;aAArB,UAAqB,EAArB,qBAAqB,EAArB,IAAqB;YAArB,8BAAqB;;QACrE,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,eAAe,EAAE,CAAC;QACzB,CAAC;QACD,KAAK,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,EAArC,CAAqC,CAAC,CAAC;IAC5D,CAAC;IAED,iCAAM,GAAN;QACE,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED,kCAAO,GAAP;QAAA,iBAUC;QATC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,SAAS;YAC9B,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,EAAxC,CAAwC,CAAC,CAAC;QACzE,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;YAClD,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;QAC/B,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IAC5B,CAAC;IAED,yCAAc,GAAd;QACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;IAC/B,CAAC;IAED,gCAAK,GAAL;QACE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;IACjB,CAAC;IACH,uBAAC;AAAD,CA9TA,AA8TC,CA9TqC,QAAQ,GA8T7C","file":"editable-polyline.js","sourceRoot":"","sourcesContent":["import { AcEntity } from '../../angular-cesium/models/ac-entity';\r\nimport { EditPoint } from './edit-point';\r\nimport { EditPolyline } from './edit-polyline';\r\nimport { AcLayerComponent } from '../../angular-cesium/components/ac-layer/ac-layer.component';\r\nimport { Cartesian3 } from '../../angular-cesium/models/cartesian3';\r\nimport { CoordinateConverter } from '../../angular-cesium/services/coordinate-converter/coordinate-converter.service';\r\nimport { PointProps, PolylineEditOptions, PolylineProps } from './polyline-edit-options';\r\nimport { GeoUtilsService } from '../../angular-cesium/services/geo-utils/geo-utils.service';\r\nimport { defaultLabelProps, LabelProps } from './label-props';\r\n\r\nexport class EditablePolyline extends AcEntity {\r\n  private positions: EditPoint[] = [];\r\n\r\n  private polylines: EditPolyline[] = [];\r\n  private movingPoint: EditPoint;\r\n  private doneCreation = false;\r\n  private _enableEdit = true;\r\n  private _pointProps: PointProps;\r\n  private polylineProps: PolylineProps;\r\n  private lastDraggedToPosition: any;\r\n  private _labels: LabelProps[] = [];\r\n\r\n  constructor(private id: string,\r\n              private pointsLayer: AcLayerComponent,\r\n              private polylinesLayer: AcLayerComponent,\r\n              private coordinateConverter: CoordinateConverter,\r\n              private editOptions: PolylineEditOptions,\r\n              positions?: Cartesian3[]) {\r\n    super();\r\n    this._pointProps = editOptions.pointProps;\r\n    this.props = editOptions.polylineProps;\r\n    if (positions && positions.length >= 2) {\r\n      this.createFromExisting(positions);\r\n    }\r\n  }\r\n\r\n  get labels(): LabelProps[] {\r\n    return this._labels;\r\n  }\r\n\r\n  set labels(labels: LabelProps[]) {\r\n    if (!labels) {\r\n      return;\r\n    }\r\n    const positions = this.getRealPositions();\r\n    this._labels = labels.map((label, index) => {\r\n      if (!label.position) {\r\n        label.position = positions[index];\r\n      }\r\n\r\n      return Object.assign({}, defaultLabelProps, label);\r\n    });\r\n  }\r\n\r\n  get props(): PolylineProps {\r\n    return this.polylineProps;\r\n  }\r\n\r\n  set props(value: PolylineProps) {\r\n    this.polylineProps = value;\r\n  }\r\n\r\n  get pointProps(): PointProps {\r\n    return this._pointProps;\r\n  }\r\n\r\n  set pointProps(value: PointProps) {\r\n    this._pointProps = value;\r\n  }\r\n\r\n  get enableEdit() {\r\n    return this._enableEdit;\r\n  }\r\n\r\n  set enableEdit(value: boolean) {\r\n    this._enableEdit = value;\r\n    this.positions.forEach(point => {\r\n      point.show = value;\r\n      this.updatePointsLayer(false, point);\r\n    });\r\n  }\r\n\r\n  private createFromExisting(positions: Cartesian3[]) {\r\n    positions.forEach((position) => {\r\n      this.addPointFromExisting(position)\r\n    });\r\n    this.addAllVirtualEditPoints();\r\n    this.doneCreation = true;\r\n  }\r\n\r\n  setManually(points: {\r\n    position: Cartesian3,\r\n    pointProp?: PointProps\r\n  }[] | Cartesian3[], polylineProps?: PolylineProps) {\r\n    if (!this.doneCreation) {\r\n      throw new Error('Update manually only in edit mode, after polyline is created')\r\n    }\r\n    this.positions.forEach(p => this.pointsLayer.remove(p.getId()));\r\n\r\n    const newPoints: EditPoint[] = [];\r\n    for (let i = 0; i < points.length; i++) {\r\n      const pointOrCartesian: any = points[i];\r\n      let newPoint = null;\r\n      if (pointOrCartesian.pointProps) {\r\n        newPoint = new EditPoint(this.id, pointOrCartesian.position, pointOrCartesian.pointProps);\r\n      } else {\r\n        newPoint = new EditPoint(this.id, pointOrCartesian, this._pointProps);\r\n      }\r\n      newPoints.push(newPoint);\r\n    }\r\n    this.positions = newPoints;\r\n    this.polylineProps = polylineProps ? polylineProps : this.polylineProps;\r\n\r\n    this.updatePointsLayer(true, ...this.positions);\r\n    this.addAllVirtualEditPoints();\r\n  }\r\n\r\n  private addAllVirtualEditPoints() {\r\n    const currentPoints = [...this.positions];\r\n    currentPoints.forEach((pos, index) => {\r\n      if (index !== currentPoints.length - 1) {\r\n        const currentPoint = pos;\r\n        const nextIndex = (index + 1) % (currentPoints.length);\r\n        const nextPoint = currentPoints[nextIndex];\r\n\r\n        const midPoint = this.setMiddleVirtualPoint(currentPoint, nextPoint);\r\n\r\n        this.updatePointsLayer(false, midPoint);\r\n      }\r\n    });\r\n  }\r\n\r\n  private setMiddleVirtualPoint(firstP: EditPoint, secondP: EditPoint): EditPoint {\r\n    const currentCart = Cesium.Cartographic.fromCartesian(firstP.getPosition());\r\n    const nextCart = Cesium.Cartographic.fromCartesian(secondP.getPosition());\r\n    const midPointCartesian3 = this.coordinateConverter.midPointToCartesian3(currentCart, nextCart);\r\n    const midPoint = new EditPoint(this.id, midPointCartesian3, this._pointProps);\r\n    midPoint.setVirtualEditPoint(true);\r\n\r\n    const firstIndex = this.positions.indexOf(firstP);\r\n    this.positions.splice(firstIndex + 1, 0, midPoint);\r\n    return midPoint;\r\n  }\r\n\r\n  private updateMiddleVirtualPoint(virtualEditPoint: EditPoint, prevPoint: EditPoint, nextPoint: EditPoint) {\r\n    const prevPointCart = Cesium.Cartographic.fromCartesian(prevPoint.getPosition());\r\n    const nextPointCart = Cesium.Cartographic.fromCartesian(nextPoint.getPosition());\r\n    virtualEditPoint.setPosition(this.coordinateConverter.midPointToCartesian3(prevPointCart, nextPointCart));\r\n  }\r\n\r\n  changeVirtualPointToRealPoint(point: EditPoint) {\r\n    point.setVirtualEditPoint(false); // actual point becomes a real point\r\n    const pointsCount = this.positions.length;\r\n    const pointIndex = this.positions.indexOf(point);\r\n    const nextIndex = (pointIndex + 1) % (pointsCount);\r\n    const preIndex = ((pointIndex - 1) + pointsCount ) % pointsCount;\r\n\r\n    const nextPoint = this.positions[nextIndex];\r\n    const prePoint = this.positions[preIndex];\r\n\r\n    const firstMidPoint = this.setMiddleVirtualPoint(prePoint, point);\r\n    const secMidPoint = this.setMiddleVirtualPoint(point, nextPoint);\r\n    this.updatePointsLayer(false, firstMidPoint, secMidPoint, point);\r\n\r\n  }\r\n\r\n  private renderPolylines() {\r\n    this.polylines.forEach(polyline => this.polylinesLayer.remove(polyline.getId()));\r\n    this.polylines = [];\r\n    const realPoints = this.positions.filter(point => !point.isVirtualEditPoint());\r\n    realPoints.forEach((point, index) => {\r\n      if (index !== realPoints.length - 1) {\r\n        const nextIndex = (index + 1);\r\n        const nextPoint = realPoints[nextIndex];\r\n        const polyline = new EditPolyline(this.id, point.getPosition(), nextPoint.getPosition(), this.polylineProps);\r\n        this.polylines.push(polyline);\r\n        this.polylinesLayer.update(polyline, polyline.getId());\r\n      }\r\n    });\r\n  }\r\n\r\n  addPointFromExisting(position: Cartesian3) {\r\n    const newPoint = new EditPoint(this.id, position, this._pointProps);\r\n    this.positions.push(newPoint);\r\n    this.updatePointsLayer(true, newPoint);\r\n  }\r\n\r\n\r\n  addPoint(position: Cartesian3) {\r\n    if (this.doneCreation) {\r\n      return;\r\n    }\r\n    const isFirstPoint = !this.positions.length;\r\n    if (isFirstPoint) {\r\n      const firstPoint = new EditPoint(this.id, position, this._pointProps);\r\n      this.positions.push(firstPoint);\r\n      this.updatePointsLayer(true, firstPoint);\r\n    }\r\n\r\n    this.movingPoint = new EditPoint(this.id, position.clone(), this._pointProps);\r\n    this.positions.push(this.movingPoint);\r\n\r\n    this.updatePointsLayer(true, this.movingPoint);\r\n  }\r\n\r\n  movePoint(toPosition: Cartesian3, editPoint: EditPoint) {\r\n    editPoint.setPosition(toPosition);\r\n    if (this.doneCreation) {\r\n      if (editPoint.isVirtualEditPoint()) {\r\n        this.changeVirtualPointToRealPoint(editPoint);\r\n      }\r\n      const pointsCount = this.positions.length;\r\n      const pointIndex = this.positions.indexOf(editPoint);\r\n\r\n      if (pointIndex < this.positions.length - 1) {\r\n        const nextVirtualPoint = this.positions[(pointIndex + 1) % (pointsCount)];\r\n        const nextRealPoint = this.positions[(pointIndex + 2) % (pointsCount)];\r\n        this.updateMiddleVirtualPoint(nextVirtualPoint, editPoint, nextRealPoint);\r\n        this.updatePointsLayer(false, nextVirtualPoint);\r\n      }\r\n      if (pointIndex > 0) {\r\n        const prevVirtualPoint = this.positions[((pointIndex - 1) + pointsCount ) % pointsCount];\r\n        const prevRealPoint = this.positions[((pointIndex - 2) + pointsCount ) % pointsCount];\r\n        this.updateMiddleVirtualPoint(prevVirtualPoint, editPoint, prevRealPoint);\r\n        this.updatePointsLayer(false, prevVirtualPoint);\r\n      }\r\n    }\r\n    this.updatePointsLayer(true, editPoint);\r\n  }\r\n\r\n  moveTempMovingPoint(toPosition: Cartesian3) {\r\n    if (this.movingPoint) {\r\n      this.movePoint(toPosition, this.movingPoint);\r\n    }\r\n  }\r\n\r\n  moveShape(startMovingPosition: Cartesian3, draggedToPosition: Cartesian3) {\r\n    if (!this.doneCreation) {\r\n      return;\r\n    }\r\n    if (!this.lastDraggedToPosition) {\r\n      this.lastDraggedToPosition = startMovingPosition;\r\n    }\r\n\r\n    const delta = GeoUtilsService.getPositionsDelta(this.lastDraggedToPosition, draggedToPosition);\r\n    this.positions.forEach(point => {\r\n      GeoUtilsService.addDeltaToPosition(point.getPosition(), delta, true);\r\n    });\r\n    this.updatePointsLayer(true, ...this.positions);\r\n    this.lastDraggedToPosition = draggedToPosition;\r\n  }\r\n\r\n  endMoveShape() {\r\n    this.lastDraggedToPosition = undefined;\r\n    this.updatePointsLayer(true, ...this.positions);\r\n  }\r\n\r\n  removePoint(pointToRemove: EditPoint) {\r\n    this.removePosition(pointToRemove);\r\n    this.positions\r\n      .filter(p => p.isVirtualEditPoint())\r\n      .forEach(p => this.removePosition(p));\r\n    this.addAllVirtualEditPoints();\r\n\r\n    this.renderPolylines();\r\n  }\r\n\r\n  addLastPoint(position: Cartesian3) {\r\n    this.doneCreation = true;\r\n    this.removePosition(this.movingPoint); // remove movingPoint\r\n    this.movingPoint = null;\r\n\r\n    this.addAllVirtualEditPoints();\r\n  }\r\n\r\n  getRealPositions(): Cartesian3[] {\r\n    return this.getRealPoints()\r\n      .map(position => position.getPosition());\r\n  }\r\n\r\n  getRealPoints(): EditPoint[] {\r\n    return this.positions\r\n      .filter(position => !position.isVirtualEditPoint() && position !== this.movingPoint);\r\n  }\r\n\r\n  getPositions(): Cartesian3[] {\r\n    return this.positions.map(position => position.getPosition());\r\n  }\r\n\r\n  private removePosition(point: EditPoint) {\r\n    const index = this.positions.findIndex((p) => p === point);\r\n    if (index < 0) {\r\n      return;\r\n    }\r\n    this.positions.splice(index, 1);\r\n    this.pointsLayer.remove(point.getId());\r\n  }\r\n\r\n  private updatePointsLayer(renderPolylines = true, ...point: EditPoint[]) {\r\n    if (renderPolylines) {\r\n      this.renderPolylines();\r\n    }\r\n    point.forEach(p => this.pointsLayer.update(p, p.getId()));\r\n  }\r\n\r\n  update() {\r\n    this.updatePointsLayer();\r\n  }\r\n\r\n  dispose() {\r\n    this.positions.forEach(editPoint => {\r\n      this.pointsLayer.remove(editPoint.getId());\r\n    });\r\n    this.polylines.forEach(line => this.polylinesLayer.remove(line.getId()));\r\n    if (this.movingPoint) {\r\n      this.pointsLayer.remove(this.movingPoint.getId());\r\n      this.movingPoint = undefined;\r\n    }\r\n    this.positions.length = 0;\r\n  }\r\n\r\n  getPointsCount(): number {\r\n    return this.positions.length;\r\n  }\r\n\r\n  getId() {\r\n    return this.id;\r\n  }\r\n}\r\n"]}