{"version":3,"sources":["editable-hippodrome.ts"],"names":[],"mappings":"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","file":"editable-hippodrome.js","sourceRoot":"","sourcesContent":["import { AcEntity } from '../../angular-cesium/models/ac-entity';\r\nimport { EditPoint } from './edit-point';\r\nimport { AcLayerComponent } from '../../angular-cesium/components/ac-layer/ac-layer.component';\r\nimport { Cartesian3 } from '../../angular-cesium/models/cartesian3';\r\nimport { CoordinateConverter } from '../../angular-cesium/services/coordinate-converter/coordinate-converter.service';\r\nimport { PointProps } from './polyline-edit-options';\r\nimport { HippodromeEditOptions, HippodromeProps } from './hippodrome-edit-options';\r\nimport { GeoUtilsService } from '../../angular-cesium/services/geo-utils/geo-utils.service';\r\nimport { defaultLabelProps, LabelProps } from './label-props';\r\n\r\nexport class EditableHippodrome extends AcEntity {\r\n\r\n  private positions: EditPoint[] = [];\r\n  private movingPoint: EditPoint;\r\n  private done = false;\r\n  private _enableEdit = true;\r\n  private _defaultPointProps: PointProps;\r\n  private _hippodromeProps: HippodromeProps;\r\n  private lastDraggedToPosition: Cartesian3;\r\n  private _labels: LabelProps[] = [];\r\n\r\n  constructor(private id: string,\r\n              private pointsLayer: AcLayerComponent,\r\n              private hippodromeLayer: AcLayerComponent,\r\n              private coordinateConverter: CoordinateConverter,\r\n              editOptions: HippodromeEditOptions,\r\n              positions?: Cartesian3[]) {\r\n    super();\r\n    this.defaultPointProps = editOptions.pointProps;\r\n    this.hippodromeProps = editOptions.hippodromeProps;\r\n    if (positions && positions.length === 2) {\r\n      this.createFromExisting(positions);\r\n    } else if (positions) {\r\n      throw new Error('Hippodrome consist of 2 points but provided ' + positions.length);\r\n    }\r\n  }\r\n\r\n  get labels(): LabelProps[] {\r\n    return this._labels;\r\n  }\r\n\r\n  set labels(labels: LabelProps[]) {\r\n    if (!labels) {\r\n      return;\r\n    }\r\n    const positions = this.getRealPositions();\r\n    this._labels = labels.map((label, index) => {\r\n      if (!label.position) {\r\n        label.position = positions[index];\r\n      }\r\n\r\n      return Object.assign({}, defaultLabelProps, label);\r\n    });\r\n  }\r\n\r\n  get hippodromeProps(): HippodromeProps {\r\n    return this._hippodromeProps;\r\n  }\r\n\r\n  set hippodromeProps(value: HippodromeProps) {\r\n    this._hippodromeProps = value;\r\n  }\r\n\r\n  get defaultPointProps(): PointProps {\r\n    return this._defaultPointProps;\r\n  }\r\n\r\n  set defaultPointProps(value: PointProps) {\r\n    this._defaultPointProps = value;\r\n  }\r\n\r\n  get enableEdit() {\r\n    return this._enableEdit;\r\n  }\r\n\r\n  set enableEdit(value: boolean) {\r\n    this._enableEdit = value;\r\n    this.positions.forEach(point => {\r\n      point.show = value;\r\n      this.updatePointsLayer(point);\r\n    });\r\n  }\r\n\r\n  private createFromExisting(positions: Cartesian3[]) {\r\n    positions.forEach((position) => {\r\n      this.addPointFromExisting(position)\r\n    });\r\n    this.createHeightEditPoints();\r\n    this.updateHippdromeLayer();\r\n    this.updatePointsLayer(...this.positions);\r\n    this.done = true;\r\n  }\r\n\r\n  setPointsManually(points: EditPoint[], widthMeters?: number) {\r\n    if (!this.done) {\r\n      throw new Error('Update manually only in edit mode, after polyline is created')\r\n    }\r\n    this.hippodromeProps.width = widthMeters ? widthMeters : this.hippodromeProps.width;\r\n    this.positions.forEach(p => this.pointsLayer.remove(p.getId()));\r\n    this.positions = points;\r\n    this.createHeightEditPoints();\r\n    this.updatePointsLayer(...points);\r\n    this.updateHippdromeLayer();\r\n  }\r\n\r\n\r\n  addPointFromExisting(position: Cartesian3) {\r\n    const newPoint = new EditPoint(this.id, position, this.defaultPointProps);\r\n    this.positions.push(newPoint);\r\n    this.updatePointsLayer(newPoint);\r\n  }\r\n\r\n\r\n  addPoint(position: Cartesian3) {\r\n    if (this.done) {\r\n      return;\r\n    }\r\n    const isFirstPoint = !this.positions.length;\r\n    if (isFirstPoint) {\r\n      const firstPoint = new EditPoint(this.id, position, this.defaultPointProps);\r\n      this.positions.push(firstPoint);\r\n      this.movingPoint = new EditPoint(this.id, position.clone(), this.defaultPointProps);\r\n      this.positions.push(this.movingPoint);\r\n      this.updatePointsLayer(firstPoint);\r\n\r\n    } else {\r\n      this.createHeightEditPoints();\r\n\r\n      this.updatePointsLayer(...this.positions);\r\n      this.updateHippdromeLayer();\r\n      this.done = true;\r\n      this.movingPoint = null;\r\n    }\r\n\r\n  }\r\n\r\n  private createHeightEditPoints() {\r\n    this.positions\r\n      .filter(p => p.isVirtualEditPoint())\r\n      .forEach(p => this.removePosition(p));\r\n\r\n    const firstP = this.getRealPoints()[0];\r\n    const secP = this.getRealPoints()[1];\r\n\r\n    const midPointCartesian3 = Cesium.Cartesian3.lerp(firstP.getPosition(), secP.getPosition(), 0.5, new Cesium.Cartesian3());\r\n    const bearingDeg = this.coordinateConverter.bearingToCartesian(firstP.getPosition(), secP.getPosition());\r\n\r\n    const upAzimuth = Cesium.Math.toRadians(bearingDeg) - Math.PI / 2;\r\n    this.createMiddleEditablePoint(midPointCartesian3, upAzimuth);\r\n    const downAzimuth = Cesium.Math.toRadians(bearingDeg) + Math.PI / 2;\r\n    this.createMiddleEditablePoint(midPointCartesian3, downAzimuth);\r\n\r\n  }\r\n\r\n  private createMiddleEditablePoint(midPointCartesian3: any, azimuth: number) {\r\n    const upEditCartesian3 = GeoUtilsService.pointByLocationDistanceAndAzimuth(midPointCartesian3,\r\n      this.hippodromeProps.width / 2, azimuth, true);\r\n    const midPoint = new EditPoint(this.id, upEditCartesian3, this.defaultPointProps);\r\n    midPoint.setVirtualEditPoint(true);\r\n    this.positions.push(midPoint);\r\n  }\r\n\r\n  movePoint(toPosition: Cartesian3, editPoint: EditPoint) {\r\n\r\n    if (!editPoint.isVirtualEditPoint()) {\r\n      editPoint.setPosition(toPosition);\r\n\r\n      this.updatePointsLayer(...this.positions);\r\n      this.updateHippdromeLayer();\r\n    } else {\r\n      this.changeWidthByNewPoint(toPosition);\r\n    }\r\n  }\r\n\r\n  private changeWidthByNewPoint(toPosition: Cartesian3) {\r\n    const firstP = this.getRealPoints()[0];\r\n    const secP = this.getRealPoints()[1];\r\n    const midPointCartesian3 = Cesium.Cartesian3.lerp(firstP.getPosition(), secP.getPosition(), 0.5, new Cesium.Cartesian3());\r\n\r\n    const bearingDeg = this.coordinateConverter.bearingToCartesian(midPointCartesian3, toPosition);\r\n    let normalizedBearingDeb = bearingDeg;\r\n    if (bearingDeg > 270) {\r\n      normalizedBearingDeb = bearingDeg - 270;\r\n    } else if (bearingDeg > 180) {\r\n      normalizedBearingDeb = bearingDeg - 180;\r\n    }\r\n    let bearingDegHippodromeDots = this.coordinateConverter.bearingToCartesian(firstP.getPosition(), secP.getPosition());\r\n    if (bearingDegHippodromeDots > 180) {\r\n      bearingDegHippodromeDots = this.coordinateConverter.bearingToCartesian(secP.getPosition(), firstP.getPosition());\r\n    }\r\n    let fixedBearingDeg = bearingDegHippodromeDots > normalizedBearingDeb ?\r\n      bearingDegHippodromeDots - normalizedBearingDeb :\r\n      normalizedBearingDeb - bearingDegHippodromeDots;\r\n\r\n    if (bearingDeg > 270) {\r\n      fixedBearingDeg = bearingDeg - bearingDegHippodromeDots;\r\n    }\r\n\r\n    const distanceMeters = Math.abs(GeoUtilsService.distance(midPointCartesian3, toPosition));\r\n    const radiusWidth = Math.sin(Cesium.Math.toRadians(fixedBearingDeg)) * distanceMeters;\r\n\r\n    this.hippodromeProps.width = Math.abs(radiusWidth) * 2;\r\n    this.createHeightEditPoints();\r\n    this.updatePointsLayer(...this.positions);\r\n    this.updateHippdromeLayer();\r\n  }\r\n\r\n  moveShape(startMovingPosition: Cartesian3, draggedToPosition: Cartesian3) {\r\n    if (!this.lastDraggedToPosition) {\r\n      this.lastDraggedToPosition = startMovingPosition;\r\n    }\r\n\r\n    const delta = GeoUtilsService.getPositionsDelta(this.lastDraggedToPosition, draggedToPosition);\r\n    this.getRealPoints().forEach(point => {\r\n      GeoUtilsService.addDeltaToPosition(point.getPosition(), delta, true);\r\n    });\r\n    this.createHeightEditPoints();\r\n    this.updatePointsLayer(...this.positions);\r\n    this.updateHippdromeLayer();\r\n    this.lastDraggedToPosition = draggedToPosition;\r\n  }\r\n\r\n  endMoveShape() {\r\n    this.lastDraggedToPosition = undefined;\r\n    this.createHeightEditPoints();\r\n    this.positions.forEach(point => this.updatePointsLayer(point));\r\n    this.updateHippdromeLayer();\r\n  }\r\n\r\n  endMovePoint() {\r\n    this.createHeightEditPoints();\r\n    this.updatePointsLayer(...this.positions);\r\n  }\r\n\r\n  moveTempMovingPoint(toPosition: Cartesian3) {\r\n    if (this.movingPoint) {\r\n      this.movePoint(toPosition, this.movingPoint);\r\n    }\r\n  }\r\n\r\n  removePoint(pointToRemove: EditPoint) {\r\n    this.removePosition(pointToRemove);\r\n    this.positions\r\n      .filter(p => p.isVirtualEditPoint())\r\n      .forEach(p => this.removePosition(p));\r\n  }\r\n\r\n  addLastPoint(position: Cartesian3) {\r\n    this.done = true;\r\n    this.removePosition(this.movingPoint); // remove movingPoint\r\n    this.movingPoint = null;\r\n  }\r\n\r\n  getRealPositions(): Cartesian3[] {\r\n    return this.getRealPoints()\r\n      .map(position => position.getPosition());\r\n  }\r\n\r\n  getRealPoints(): EditPoint[] {\r\n    return this.positions\r\n      .filter(position => !position.isVirtualEditPoint());\r\n  }\r\n\r\n  getWidth(): number {\r\n    return this.hippodromeProps.width;\r\n  }\r\n\r\n  getPositions(): Cartesian3[] {\r\n    return this.positions.map(position => position.getPosition());\r\n  }\r\n\r\n  private removePosition(point: EditPoint) {\r\n    const index = this.positions.findIndex((p) => p === point);\r\n    if (index < 0) {\r\n      return;\r\n    }\r\n    this.positions.splice(index, 1);\r\n    this.pointsLayer.remove(point.getId());\r\n  }\r\n\r\n  private updatePointsLayer(...point: EditPoint[]) {\r\n    point.forEach(p => this.pointsLayer.update(p, p.getId()));\r\n  }\r\n\r\n  private updateHippdromeLayer() {\r\n    this.hippodromeLayer.update(this, this.id);\r\n  }\r\n\r\n  dispose() {\r\n    this.hippodromeLayer.remove(this.id);\r\n\r\n    this.positions.forEach(editPoint => {\r\n      this.pointsLayer.remove(editPoint.getId());\r\n    });\r\n    if (this.movingPoint) {\r\n      this.pointsLayer.remove(this.movingPoint.getId());\r\n      this.movingPoint = undefined;\r\n    }\r\n    this.positions.length = 0;\r\n  }\r\n\r\n  getPointsCount(): number {\r\n    return this.positions.length;\r\n  }\r\n\r\n  getId() {\r\n    return this.id;\r\n  }\r\n}\r\n"]}