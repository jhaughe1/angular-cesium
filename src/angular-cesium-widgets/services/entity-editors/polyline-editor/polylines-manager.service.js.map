{"version":3,"sources":["polylines-manager.service.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAG3C,OAAO,EAAE,gBAAA,EAAiB,MAAO,mCAAA,CAAoC;AAGrE;IAAA;QACC,cAAS,GAAkC,IAAI,GAAG,EAA4B,CAAC;IA6BhF,CAAC;IA3BA,wDAAsB,GAAtB,UAAuB,EAAU,EAAE,kBAAoC,EAAE,eAAiC,EAC/F,mBAAwC,EAAE,eAAoC,EAAE,SAAwB;QAClH,IAAM,gBAAgB,GAAG,IAAI,gBAAgB,CAC5C,EAAE,EACF,kBAAkB,EAClB,eAAe,EACf,mBAAmB,EACnB,eAAe,EACf,SAAS,CAAC,CAAC;QACZ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE,gBAAgB,CACtC,CAAC;IACH,CAAC;IAED,qCAAG,GAAH,UAAI,EAAU;QACb,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC/B,CAAC;IAED,uCAAK,GAAL;QACC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,OAAO,EAAE,EAAlB,CAAkB,CAAC,CAAC;QACvD,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;IACK,kCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IAEK,sCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,8BAAC;CA9BD,AA8BC,IAAA;SA9BY,uBAAuB","file":"polylines-manager.service.js","sourceRoot":"","sourcesContent":["import { CoordinateConverter } from './../../../../angular-cesium/services/coordinate-converter/coordinate-converter.service';\r\nimport { AcLayerComponent } from './../../../../angular-cesium/components/ac-layer/ac-layer.component';\r\nimport { Injectable } from '@angular/core';\r\nimport { Cartesian3 } from '../../../../angular-cesium/models/cartesian3';\r\nimport { PolygonEditOptions } from '../../../models/polygon-edit-options';\r\nimport { EditablePolyline } from '../../../models/editable-polyline';\r\n\r\n\r\nexport class PolylinesManagerService {\r\n\tpolylines: Map<string, EditablePolyline> = new Map<string, EditablePolyline>();\r\n\t\r\n\tcreateEditablePolyline(id: string, editPolylinesLayer: AcLayerComponent, editPointsLayer: AcLayerComponent,\r\n\t\t\t\t\t\t\t\t\t\t\t\tcoordinateConverter: CoordinateConverter, polylineOptions?: PolygonEditOptions, positions?: Cartesian3[]) {\r\n\t\tconst editablePolyline = new EditablePolyline(\r\n\t\t\tid,\r\n\t\t\teditPolylinesLayer,\r\n\t\t\teditPointsLayer,\r\n\t\t\tcoordinateConverter,\r\n\t\t\tpolylineOptions,\r\n\t\t\tpositions);\r\n\t\tthis.polylines.set(id, editablePolyline\r\n\t\t);\r\n\t}\r\n\t\r\n\tget(id: string): EditablePolyline {\r\n\t\treturn this.polylines.get(id);\r\n\t}\r\n\t\r\n\tclear() {\r\n\t\tthis.polylines.forEach(polyline => polyline.dispose());\r\n\t\tthis.polylines.clear();\r\n\t}\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}