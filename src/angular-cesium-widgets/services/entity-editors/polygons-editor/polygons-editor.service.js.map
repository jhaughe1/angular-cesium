{"version":3,"sources":["polygons-editor.service.ts"],"names":[],"mappings":"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","file":"polygons-editor.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { MapEventsManagerService } from '../../../../angular-cesium/services/map-events-mananger/map-events-manager';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { CesiumEvent } from '../../../../angular-cesium/services/map-events-mananger/consts/cesium-event.enum';\r\nimport { PickOptions } from '../../../../angular-cesium/services/map-events-mananger/consts/pickOptions.enum';\r\nimport { PolygonEditUpdate } from '../../../models/polygon-edit-update';\r\nimport { EditModes } from '../../../models/edit-mode.enum';\r\nimport { EditActions } from '../../../models/edit-actions.enum';\r\nimport { DisposableObservable } from '../../../../angular-cesium/services/map-events-mananger/disposable-observable';\r\nimport { CoordinateConverter } from '../../../../angular-cesium/services/coordinate-converter/coordinate-converter.service';\r\nimport { EditPoint } from '../../../models/edit-point';\r\nimport { CameraService } from '../../../../angular-cesium/services/camera/camera.service';\r\nimport { Cartesian3 } from '../../../../angular-cesium/models/cartesian3';\r\nimport { PolygonsManagerService } from './polygons-manager.service';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { PolygonEditorObservable } from '../../../models/polygon-editor-observable';\r\nimport { EditablePolygon } from '../../../models/editable-polygon';\r\nimport { PolygonEditOptions, PolygonProps } from '../../../models/polygon-edit-options';\r\nimport { PointProps } from '../../../models/polyline-edit-options';\r\nimport { LabelProps } from '../../../models/label-props';\r\n\r\nexport const DEFAULT_POLYGON_OPTIONS: PolygonEditOptions = {\r\n  addPointEvent: CesiumEvent.LEFT_CLICK,\r\n  addLastPointEvent: CesiumEvent.LEFT_DOUBLE_CLICK,\r\n  removePointEvent: CesiumEvent.RIGHT_CLICK,\r\n  dragPointEvent: CesiumEvent.LEFT_CLICK_DRAG,\r\n  dragShapeEvent: CesiumEvent.LEFT_CLICK_DRAG,\r\n  allowDrag: true,\r\n  pointProps: {\r\n    color: Cesium.Color.WHITE,\r\n    outlineColor: Cesium.Color.BLACK,\r\n    outlineWidth: 1,\r\n    pixelSize: 15,\r\n    virtualPointPixelSize: 8,\r\n    show: true,\r\n    showVirtual: true,\r\n  },\r\n  polygonProps: {\r\n    material: new Cesium.Color(0.1, 0.5, 0.2, 0.4),\r\n  },\r\n  polylineProps: {\r\n    material: () => Cesium.Color.BLACK,\r\n    width: 1,\r\n  },\r\n};\r\n\r\n/**\r\n * Service for creating editable polygons\r\n *\r\n * You must provide `PolygonsEditorService` yourself.\r\n * PolygonsEditorService works together with `<polygons-editor>` component. Therefor you need to create `<polygons-editor>`\r\n * for each `PolygonsEditorService`, And of course somewhere under `<ac-map>`/\r\n *\r\n * + `create` for starting a creation of the shape over the map. Returns a extension of `PolygonEditorObservable`.\r\n * + `edit` for editing shape over the map starting from a given positions. Returns an extension of `PolygonEditorObservable`.\r\n * + To stop editing call `dsipose()` from the `PolygonEditorObservable` you get back from `create()` \\ `edit()`.\r\n *\r\n * **Labels over editted shapes**\r\n * Angular Cesium allows you to draw labels over a shape that is being edited with one of the editors.\r\n * To add label drawing logic to your editor use the function `setLabelsRenderFn()` that is defined on the\r\n * `PolygonEditorObservable` that is returned from calling `create()` \\ `edit()` of one of the editor services.\r\n * `setLabelsRenderFn()` - receives a callback that is called every time the shape is redrawn\r\n * (except when the shape is being dragged). The callback is called with the last shape state and with an array of the current labels.\r\n * The callback should return type `LabelProps[]`.\r\n * You can also use `updateLabels()` to pass an array of labels of type `LabelProps[]` to be drawn.\r\n *\r\n * usage:\r\n * ```typescript\r\n *  // Start creating polygon\r\n *  const editing$ = polygonsEditorService.create();\r\n *  this.editing$.subscribe(editResult => {\r\n *\t\t\t\tconsole.log(editResult.positions);\r\n *\t\t});\r\n *\r\n *  // Or edit polygon from existing polygon positions\r\n *  const editing$ = this.polygonsEditorService.edit(initialPos);\r\n *\r\n * ```\r\n */\r\n\r\nexport class PolygonsEditorService {\r\n  private mapEventsManager: MapEventsManagerService;\r\n  private updateSubject = new Subject<PolygonEditUpdate>();\r\n  private updatePublisher = this.updateSubject.publish(); // TODO maybe not needed\r\n  private counter = 0;\r\n  private coordinateConverter: CoordinateConverter;\r\n  private cameraService: CameraService;\r\n  private polygonsManager: PolygonsManagerService;\r\n  private observablesMap = new Map<string, DisposableObservable<any>[]>();\r\n\r\n  init(mapEventsManager: MapEventsManagerService,\r\n       coordinateConverter: CoordinateConverter,\r\n       cameraService: CameraService,\r\n       polygonsManager: PolygonsManagerService) {\r\n    this.mapEventsManager = mapEventsManager;\r\n    this.updatePublisher.connect();\r\n    this.coordinateConverter = coordinateConverter;\r\n    this.cameraService = cameraService;\r\n    this.polygonsManager = polygonsManager;\r\n\r\n  }\r\n\r\n  onUpdate(): Observable<PolygonEditUpdate> {\r\n    return this.updatePublisher;\r\n  }\r\n\r\n  create(options = DEFAULT_POLYGON_OPTIONS, priority = 100): PolygonEditorObservable {\r\n    const positions: Cartesian3[] = [];\r\n    const id = this.generteId();\r\n    const polygonOptions = this.setOptions(options);\r\n\r\n    const clientEditSubject = new BehaviorSubject<PolygonEditUpdate>({\r\n      id,\r\n      editAction: null,\r\n      editMode: EditModes.CREATE\r\n    });\r\n    let finishedCreate = false;\r\n\r\n    this.updateSubject.next({\r\n      id,\r\n      positions,\r\n      editMode: EditModes.CREATE,\r\n      editAction: EditActions.INIT,\r\n      polygonOptions: polygonOptions,\r\n    });\r\n\r\n    const mouseMoveRegistration = this.mapEventsManager.register({\r\n      event: CesiumEvent.MOUSE_MOVE,\r\n      pick: PickOptions.NO_PICK,\r\n      priority,\r\n    });\r\n    const addPointRegistration = this.mapEventsManager.register({\r\n      event: polygonOptions.addPointEvent,\r\n      pick: PickOptions.NO_PICK,\r\n      priority,\r\n    });\r\n    const addLastPointRegistration = this.mapEventsManager.register({\r\n      event: polygonOptions.addLastPointEvent,\r\n      pick: PickOptions.NO_PICK,\r\n      priority,\r\n    });\r\n\r\n    this.observablesMap.set(id, [mouseMoveRegistration, addPointRegistration, addLastPointRegistration]);\r\n    const editorObservable = this.createEditorObservable(clientEditSubject, id);\r\n\r\n    mouseMoveRegistration.subscribe(({ movement: { endPosition } }) => {\r\n      const position = this.coordinateConverter.screenToCartesian3(endPosition);\r\n\r\n      if (position) {\r\n        this.updateSubject.next({\r\n          id,\r\n          positions: this.getPositions(id),\r\n          editMode: EditModes.CREATE,\r\n          updatedPosition: position,\r\n          editAction: EditActions.MOUSE_MOVE,\r\n        });\r\n      }\r\n    });\r\n\r\n    addPointRegistration.subscribe(({ movement: { endPosition } }) => {\r\n      if (finishedCreate) {\r\n        return;\r\n      }\r\n      const position = this.coordinateConverter.screenToCartesian3(endPosition);\r\n      if (!position) {\r\n        return;\r\n      }\r\n      const allPositions = this.getPositions(id);\r\n      if (allPositions.find((cartesian) => cartesian.equals(position))) {\r\n        return;\r\n      }\r\n\r\n      const updateValue = {\r\n        id,\r\n        positions: allPositions,\r\n        editMode: EditModes.CREATE,\r\n        updatedPosition: position,\r\n        editAction: EditActions.ADD_POINT,\r\n      };\r\n      this.updateSubject.next(updateValue);\r\n      clientEditSubject.next({\r\n        ...updateValue,\r\n        positions: this.getPositions(id),\r\n        points: this.getPoints(id),\r\n      });\r\n    });\r\n\r\n\r\n    addLastPointRegistration.subscribe(({ movement: { endPosition } }) => {\r\n      const position = this.coordinateConverter.screenToCartesian3(endPosition);\r\n      if (!position) {\r\n        return;\r\n      }\r\n      // position already added by addPointRegistration\r\n      const updateValue = {\r\n        id,\r\n        positions: this.getPositions(id),\r\n        editMode: EditModes.CREATE,\r\n        updatedPosition: position,\r\n        editAction: EditActions.ADD_LAST_POINT,\r\n      };\r\n      this.updateSubject.next(updateValue);\r\n      clientEditSubject.next({\r\n        ...updateValue,\r\n        positions: this.getPositions(id),\r\n        points: this.getPoints(id),\r\n      });\r\n\r\n      const changeMode = {\r\n        id,\r\n        editMode: EditModes.CREATE,\r\n        editAction: EditActions.CHANGE_TO_EDIT,\r\n      };\r\n      this.updateSubject.next(changeMode);\r\n      clientEditSubject.next(changeMode);\r\n      if (this.observablesMap.has(id)) {\r\n        this.observablesMap.get(id).forEach(registration => registration.dispose());\r\n      }\r\n      this.observablesMap.delete(id);\r\n      this.editPolygon(id, positions, priority, clientEditSubject, polygonOptions, editorObservable);\r\n      finishedCreate = true;\r\n    });\r\n\r\n    return editorObservable;\r\n  }\r\n\r\n  edit(positions: Cartesian3[], options = DEFAULT_POLYGON_OPTIONS, priority = 100): PolygonEditorObservable {\r\n    if (positions.length < 3) {\r\n      throw new Error('Polygons editor error edit(): polygon should have at least 3 positions');\r\n    }\r\n    const id = this.generteId();\r\n    const polygonOptions = this.setOptions(options);\r\n    const editSubject = new BehaviorSubject<PolygonEditUpdate>({\r\n      id,\r\n      editAction: null,\r\n      editMode: EditModes.EDIT\r\n    });\r\n    const update = {\r\n      id,\r\n      positions: positions,\r\n      editMode: EditModes.EDIT,\r\n      editAction: EditActions.INIT,\r\n      polygonOptions: polygonOptions,\r\n    };\r\n    this.updateSubject.next(update);\r\n    editSubject.next({\r\n      ...update,\r\n      positions: this.getPositions(id),\r\n      points: this.getPoints(id),\r\n    });\r\n    return this.editPolygon(\r\n      id,\r\n      positions,\r\n      priority,\r\n      editSubject,\r\n      polygonOptions\r\n    )\r\n  }\r\n\r\n  private editPolygon(id: string,\r\n                      positions: Cartesian3[],\r\n                      priority: number,\r\n                      editSubject: Subject<PolygonEditUpdate>,\r\n                      options: PolygonEditOptions,\r\n                      editObservable?: PolygonEditorObservable): PolygonEditorObservable {\r\n\r\n    const pointDragRegistration = this.mapEventsManager.register({\r\n      event: options.dragPointEvent,\r\n      entityType: EditPoint,\r\n      pick: PickOptions.PICK_FIRST,\r\n      priority,\r\n    });\r\n\r\n    let shapeDragRegistration;\r\n    if (options.allowDrag) {\r\n      shapeDragRegistration = this.mapEventsManager.register({\r\n        event: options.dragShapeEvent,\r\n        entityType: EditablePolygon,\r\n        pick: PickOptions.PICK_FIRST,\r\n        priority,\r\n      });\r\n    }\r\n    const pointRemoveRegistration = this.mapEventsManager.register({\r\n      event: options.removePointEvent,\r\n      entityType: EditPoint,\r\n      pick: PickOptions.PICK_FIRST,\r\n      priority,\r\n    });\r\n\r\n    pointDragRegistration\r\n      .do(({ movement: { drop } }) => this.cameraService.enableInputs(drop))\r\n      .subscribe(({ movement: { endPosition, drop }, entities }) => {\r\n        const position = this.coordinateConverter.screenToCartesian3(endPosition);\r\n        if (!position) {\r\n          return;\r\n        }\r\n        const point: EditPoint = entities[0];\r\n\r\n        const update = {\r\n          id,\r\n          positions: this.getPositions(id),\r\n          editMode: EditModes.EDIT,\r\n          updatedPosition: position,\r\n          updatedPoint: point,\r\n          editAction: drop ? EditActions.DRAG_POINT_FINISH : EditActions.DRAG_POINT,\r\n        };\r\n        this.updateSubject.next(update);\r\n        editSubject.next({\r\n          ...update,\r\n          positions: this.getPositions(id),\r\n          points: this.getPoints(id),\r\n        });\r\n      });\r\n\r\n    if (shapeDragRegistration) {\r\n      shapeDragRegistration\r\n        .do(({ movement: { drop } }) => this.cameraService.enableInputs(drop))\r\n        .subscribe(({ movement: { startPosition, endPosition, drop }, entities }) => {\r\n          const endDragPosition = this.coordinateConverter.screenToCartesian3(endPosition);\r\n          const startDragPosition = this.coordinateConverter.screenToCartesian3(startPosition);\r\n          if (!endDragPosition) {\r\n            return;\r\n          }\r\n\r\n          const update = {\r\n            id,\r\n            positions: this.getPositions(id),\r\n            editMode: EditModes.EDIT,\r\n            updatedPosition: endDragPosition,\r\n            draggedPosition: startDragPosition,\r\n            editAction: drop ? EditActions.DRAG_SHAPE_FINISH : EditActions.DRAG_SHAPE,\r\n          };\r\n          this.updateSubject.next(update);\r\n          editSubject.next({\r\n            ...update,\r\n            positions: this.getPositions(id),\r\n            points: this.getPoints(id),\r\n          });\r\n        });\r\n    }\r\n\r\n    pointRemoveRegistration.subscribe(({ entities }) => {\r\n      const point: EditPoint = entities[0];\r\n      const allPositions = [...this.getPositions(id)];\r\n      if (allPositions.length < 4) {\r\n        return;\r\n      }\r\n      const index = allPositions.findIndex(position => point.getPosition().equals(position as Cartesian3));\r\n      if (index < 0) {\r\n        return;\r\n      }\r\n\r\n      const update = {\r\n        id,\r\n        positions: allPositions,\r\n        editMode: EditModes.EDIT,\r\n        updatedPoint: point,\r\n        editAction: EditActions.REMOVE_POINT,\r\n      };\r\n      this.updateSubject.next(update);\r\n      editSubject.next({\r\n        ...update,\r\n        positions: this.getPositions(id),\r\n        points: this.getPoints(id),\r\n      });\r\n    });\r\n\r\n    const observables = [pointDragRegistration, pointRemoveRegistration];\r\n    if (shapeDragRegistration) {\r\n      observables.push(shapeDragRegistration);\r\n    }\r\n\r\n    this.observablesMap.set(id, observables);\r\n    return editObservable || this.createEditorObservable(editSubject, id);\r\n  }\r\n\r\n  private setOptions(options: PolygonEditOptions) {\r\n    const defaultClone = JSON.parse(JSON.stringify(DEFAULT_POLYGON_OPTIONS));\r\n    const polygonOptions = Object.assign(defaultClone, options);\r\n    polygonOptions.pointProps = Object.assign({}, DEFAULT_POLYGON_OPTIONS.pointProps, options.pointProps);\r\n    polygonOptions.polygonProps = Object.assign({}, DEFAULT_POLYGON_OPTIONS.polygonProps, options.polygonProps);\r\n    polygonOptions.polylineProps = Object.assign({}, DEFAULT_POLYGON_OPTIONS.polylineProps, options.polylineProps);\r\n    return polygonOptions;\r\n  }\r\n\r\n\r\n  private createEditorObservable(observableToExtend: any, id: string): PolygonEditorObservable {\r\n    observableToExtend.dispose = () => {\r\n      const observables = this.observablesMap.get(id);\r\n      if (observables) {\r\n        observables.forEach(obs => obs.dispose())\r\n      }\r\n      this.observablesMap.delete(id);\r\n      this.updateSubject.next({\r\n        id,\r\n        positions: this.getPositions(id),\r\n        editMode: EditModes.CREATE_OR_EDIT,\r\n        editAction: EditActions.DISPOSE,\r\n      });\r\n    };\r\n    observableToExtend.enable = () => {\r\n      this.updateSubject.next({\r\n        id,\r\n        positions: this.getPositions(id),\r\n        editMode: EditModes.EDIT,\r\n        editAction: EditActions.ENABLE,\r\n      });\r\n    };\r\n    observableToExtend.disable = () => {\r\n      this.updateSubject.next({\r\n        id,\r\n        positions: this.getPositions(id),\r\n        editMode: EditModes.EDIT,\r\n        editAction: EditActions.DISABLE,\r\n      });\r\n    };\r\n    observableToExtend.setManually = (points: {\r\n      position: Cartesian3, pointProps: PointProps\r\n    }[] | Cartesian3[], polygonProps?: PolygonProps) => {\r\n      const polygon = this.polygonsManager.get(id);\r\n      polygon.setPointsManually(points, polygonProps);\r\n      this.updateSubject.next({\r\n        id,\r\n        editMode: EditModes.CREATE_OR_EDIT,\r\n        editAction: EditActions.SET_MANUALLY,\r\n      });\r\n    };\r\n\r\n    observableToExtend.setLabelsRenderFn = (callback: any) => {\r\n      this.updateSubject.next({\r\n        id,\r\n        editMode: EditModes.CREATE_OR_EDIT,\r\n        editAction: EditActions.SET_EDIT_LABELS_RENDER_CALLBACK,\r\n        labelsRenderFn: callback,\r\n      })\r\n    };\r\n\r\n    observableToExtend.updateLabels = (labels: LabelProps[]) => {\r\n      this.updateSubject.next({\r\n        id,\r\n        editMode: EditModes.CREATE_OR_EDIT,\r\n        editAction: EditActions.UPDATE_EDIT_LABELS,\r\n        updateLabels: labels,\r\n      })\r\n    };\r\n\r\n    observableToExtend.getCurrentPoints = () => this.getPoints(id);\r\n\r\n    observableToExtend.getEditValue = () => observableToExtend.getValue();\r\n\r\n    observableToExtend.getLabels = (): LabelProps[] => this.polygonsManager.get(id).labels;\r\n\r\n    return observableToExtend as PolygonEditorObservable;\r\n  }\r\n\r\n\r\n  private generteId(): string {\r\n    return 'edit-polygon-' + this.counter++;\r\n  }\r\n\r\n  private getPositions(id: string) {\r\n    const polygon = this.polygonsManager.get(id);\r\n    return polygon.getRealPositions()\r\n  }\r\n\r\n  private getPoints(id: string) {\r\n    const polygon = this.polygonsManager.get(id);\r\n    return polygon.getRealPoints();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}