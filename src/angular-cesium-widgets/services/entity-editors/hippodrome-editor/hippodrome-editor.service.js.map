{"version":3,"sources":["hippodrome-editor.service.ts"],"names":[],"mappings":"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","file":"hippodrome-editor.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { MapEventsManagerService } from '../../../../angular-cesium/services/map-events-mananger/map-events-manager';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { CesiumEvent } from '../../../../angular-cesium/services/map-events-mananger/consts/cesium-event.enum';\r\nimport { PickOptions } from '../../../../angular-cesium/services/map-events-mananger/consts/pickOptions.enum';\r\nimport { EditModes } from '../../../models/edit-mode.enum';\r\nimport { EditActions } from '../../../models/edit-actions.enum';\r\nimport { DisposableObservable } from '../../../../angular-cesium/services/map-events-mananger/disposable-observable';\r\nimport { CoordinateConverter } from '../../../../angular-cesium/services/coordinate-converter/coordinate-converter.service';\r\nimport { EditPoint } from '../../../models/edit-point';\r\nimport { CameraService } from '../../../../angular-cesium/services/camera/camera.service';\r\nimport { Cartesian3 } from '../../../../angular-cesium/models/cartesian3';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { HippodromeEditOptions } from '../../../models/hippodrome-edit-options';\r\nimport { HippodromeManagerService } from './hippodrome-manager.service';\r\nimport { HippodromeEditorObservable } from '../../../models/hippodrome-editor-oboservable';\r\nimport { HippodromeEditUpdate } from '../../../models/hippodrome-edit-update';\r\nimport { EditableHippodrome } from '../../../models/editable-hippodrome';\r\nimport { PointProps } from '../../../models/polyline-edit-options';\r\nimport { LabelProps } from '../../../models/label-props';\r\n\r\nexport const DEFAULT_HIPPODROME_OPTIONS: HippodromeEditOptions = {\r\n  addPointEvent: CesiumEvent.LEFT_CLICK,\r\n  dragPointEvent: CesiumEvent.LEFT_CLICK_DRAG,\r\n  dragShapeEvent: CesiumEvent.LEFT_CLICK_DRAG,\r\n  allowDrag: true,\r\n  hippodromeProps: {\r\n    material: Cesium.Color.GREEN.withAlpha(0.5),\r\n    width: 200000.0,\r\n    outline: false,\r\n  },\r\n  pointProps: {\r\n    color: Cesium.Color.WHITE,\r\n    outlineColor: Cesium.Color.BLACK,\r\n    outlineWidth: 1,\r\n    pixelSize: 15,\r\n    virtualPointPixelSize: 8,\r\n    show: true,\r\n    showVirtual: true,\r\n  },\r\n};\r\n\r\n/**\r\n * Service for creating editable hippodromes\r\n *\r\n * You must provide `HippodromeEditorService` yourself.\r\n * HippodromeEditorService works together with `<hippodromes-editor>` component. Therefor you need to create `<hippodromes-editor>`\r\n * for each `PolylineEditorService`, And of course somewhere under `<ac-map>`/\r\n *\r\n * + `create` for starting a creation of the shape over the map. Returns a extension of `HippodromeEditorObservable`.\r\n * + `edit` for editing shape over the map starting from a given positions. Returns an extension of `HippodromeEditorObservable`.\r\n * + To stop editing call `dsipose()` from the `HippodromeEditorObservable` you get back from `create()` \\ `edit()`.\r\n *\r\n * **Labels over editted shapes**\r\n * Angular Cesium allows you to draw labels over a shape that is being edited with one of the editors.\r\n * To add label drawing logic to your editor use the function `setLabelsRenderFn()` that is defined on the\r\n * `HippodromeEditorObservable` that is returned from calling `create()` \\ `edit()` of one of the editor services.\r\n * `setLabelsRenderFn()` - receives a callback that is called every time the shape is redrawn\r\n * (except when the shape is being dragged). The callback is called with the last shape state and with an array of the current labels.\r\n * The callback should return type `LabelProps[]`.\r\n * You can also use `updateLabels()` to pass an array of labels of type `LabelProps[]` to be drawn.\r\n *\r\n *\r\n * usage:\r\n * ```typescript\r\n *  // Start creating hippodrome\r\n *  const editing$ = hippodromeEditorService.create();\r\n *  this.editing$.subscribe(editResult => {\r\n *\t\t\t\tconsole.log(editResult.positions);\r\n *\t\t});\r\n *\r\n *  // Or edit hippodromes from existing hippodromes cartesian3 positions\r\n *  const editing$ = this.hippodromeEditor.edit(initialPos);\r\n *\r\n * ```\r\n */\r\n\r\nexport class HippodromeEditorService {\r\n  private mapEventsManager: MapEventsManagerService;\r\n  private updateSubject = new Subject<HippodromeEditUpdate>();\r\n  private updatePublisher = this.updateSubject.publish(); // TODO maybe not needed\r\n  private counter = 0;\r\n  private coordinateConverter: CoordinateConverter;\r\n  private cameraService: CameraService;\r\n  private hippodromeManager: HippodromeManagerService;\r\n  private observablesMap = new Map<string, DisposableObservable<any>[]>();\r\n\r\n  init(mapEventsManager: MapEventsManagerService,\r\n       coordinateConverter: CoordinateConverter,\r\n       cameraService: CameraService,\r\n       managerService: HippodromeManagerService) {\r\n    this.mapEventsManager = mapEventsManager;\r\n    this.updatePublisher.connect();\r\n    this.coordinateConverter = coordinateConverter;\r\n    this.cameraService = cameraService;\r\n    this.hippodromeManager = managerService;\r\n\r\n  }\r\n\r\n  onUpdate(): Observable<HippodromeEditUpdate> {\r\n    return this.updatePublisher;\r\n  }\r\n\r\n  create(options = DEFAULT_HIPPODROME_OPTIONS, eventPriority = 100): HippodromeEditorObservable {\r\n    const positions: Cartesian3[] = [];\r\n    const id = this.generteId();\r\n    const hippodromeOptions = this.setOptions(options);\r\n\r\n    const clientEditSubject = new BehaviorSubject<HippodromeEditUpdate>({\r\n      id,\r\n      editAction: null,\r\n      editMode: EditModes.CREATE\r\n    });\r\n    let finishedCreate = false;\r\n\r\n    this.updateSubject.next({\r\n      id,\r\n      positions,\r\n      editMode: EditModes.CREATE,\r\n      editAction: EditActions.INIT,\r\n      hippodromeOptions: hippodromeOptions,\r\n    });\r\n\r\n    const mouseMoveRegistration = this.mapEventsManager.register({\r\n      event: CesiumEvent.MOUSE_MOVE,\r\n      pick: PickOptions.NO_PICK,\r\n      priority: eventPriority,\r\n    });\r\n    const addPointRegistration = this.mapEventsManager.register({\r\n      event: hippodromeOptions.addPointEvent,\r\n      pick: PickOptions.NO_PICK,\r\n      priority: eventPriority,\r\n    });\r\n\r\n    this.observablesMap.set(id, [mouseMoveRegistration, addPointRegistration]);\r\n    const editorObservable = this.createEditorObservable(clientEditSubject, id);\r\n\r\n    mouseMoveRegistration.subscribe(({ movement: { endPosition } }) => {\r\n      const position = this.coordinateConverter.screenToCartesian3(endPosition);\r\n\r\n      if (position) {\r\n        this.updateSubject.next({\r\n          id,\r\n          positions: this.getPositions(id),\r\n          editMode: EditModes.CREATE,\r\n          updatedPosition: position,\r\n          editAction: EditActions.MOUSE_MOVE,\r\n        });\r\n      }\r\n    });\r\n\r\n    addPointRegistration.subscribe(({ movement: { endPosition } }) => {\r\n      if (finishedCreate) {\r\n        return;\r\n      }\r\n      const position = this.coordinateConverter.screenToCartesian3(endPosition);\r\n      if (!position) {\r\n        return;\r\n      }\r\n\r\n      const allPositions = this.getPositions(id);\r\n      const isFirstPoint = this.getPositions(id).length === 0;\r\n\r\n      const updateValue = {\r\n        id,\r\n        positions: allPositions,\r\n        editMode: EditModes.CREATE,\r\n        updatedPosition: position,\r\n        editAction: EditActions.ADD_POINT,\r\n      };\r\n      this.updateSubject.next(updateValue);\r\n      clientEditSubject.next({\r\n        ...updateValue,\r\n        positions: this.getPositions(id),\r\n        points: this.getPoints(id),\r\n        width: this.getWidth(id),\r\n      });\r\n\r\n      if (!isFirstPoint) {\r\n        const changeMode = {\r\n          id,\r\n          editMode: EditModes.CREATE,\r\n          editAction: EditActions.CHANGE_TO_EDIT,\r\n        };\r\n        this.updateSubject.next(changeMode);\r\n        clientEditSubject.next(changeMode);\r\n        if (this.observablesMap.has(id)) {\r\n          this.observablesMap.get(id).forEach(registration => registration.dispose());\r\n        }\r\n        this.observablesMap.delete(id);\r\n        this.editHippodrome(id, eventPriority, clientEditSubject, hippodromeOptions, editorObservable);\r\n        finishedCreate = true;\r\n      }\r\n    });\r\n\r\n    return editorObservable;\r\n  }\r\n\r\n  edit(positions: Cartesian3[], options = DEFAULT_HIPPODROME_OPTIONS, priority = 100): HippodromeEditorObservable {\r\n    if (positions.length !== 2) {\r\n      throw new Error('Hippodrome editor error edit(): polygon should have 2 positions but received ' + positions);\r\n    }\r\n    const id = this.generteId();\r\n    const hippodromeEditOptions = this.setOptions(options);\r\n    const editSubject = new BehaviorSubject<HippodromeEditUpdate>({\r\n      id,\r\n      editAction: null,\r\n      editMode: EditModes.EDIT\r\n    });\r\n    const update = {\r\n      id,\r\n      positions: positions,\r\n      editMode: EditModes.EDIT,\r\n      editAction: EditActions.INIT,\r\n      hippodromeOptions: hippodromeEditOptions,\r\n    };\r\n    this.updateSubject.next(update);\r\n    editSubject.next({\r\n      ...update,\r\n      positions: this.getPositions(id),\r\n      points: this.getPoints(id),\r\n      width: this.getWidth(id),\r\n    });\r\n    return this.editHippodrome(\r\n      id,\r\n      priority,\r\n      editSubject,\r\n      hippodromeEditOptions\r\n    )\r\n  }\r\n\r\n  private editHippodrome(id: string,\r\n                         priority: number,\r\n                         editSubject: Subject<HippodromeEditUpdate>,\r\n                         options: HippodromeEditOptions,\r\n                         editObservable?: HippodromeEditorObservable): HippodromeEditorObservable {\r\n    let shapeDragRegistration;\r\n    if (options.allowDrag) {\r\n      shapeDragRegistration = this.mapEventsManager.register({\r\n        event: options.dragShapeEvent,\r\n        entityType: EditableHippodrome,\r\n        pick: PickOptions.PICK_FIRST,\r\n        priority,\r\n      });\r\n    }\r\n    const pointDragRegistration = this.mapEventsManager.register({\r\n      event: options.dragPointEvent,\r\n      entityType: EditPoint,\r\n      pick: PickOptions.PICK_FIRST,\r\n      priority,\r\n    });\r\n\r\n    pointDragRegistration\r\n      .do(({ movement: { drop } }) => this.cameraService.enableInputs(drop))\r\n      .subscribe(({ movement: { endPosition, drop }, entities }) => {\r\n        const position = this.coordinateConverter.screenToCartesian3(endPosition);\r\n        if (!position) {\r\n          return;\r\n        }\r\n        const point: EditPoint = entities[0];\r\n\r\n        const update = {\r\n          id,\r\n          positions: this.getPositions(id),\r\n          editMode: EditModes.EDIT,\r\n          updatedPosition: position,\r\n          updatedPoint: point,\r\n          editAction: drop ? EditActions.DRAG_POINT_FINISH : EditActions.DRAG_POINT,\r\n        };\r\n        this.updateSubject.next(update);\r\n        editSubject.next({\r\n          ...update,\r\n          positions: this.getPositions(id),\r\n          points: this.getPoints(id),\r\n          width: this.getWidth(id),\r\n        });\r\n      });\r\n\r\n    if (shapeDragRegistration) {\r\n      shapeDragRegistration\r\n        .do(({ movement: { drop } }) => this.cameraService.enableInputs(drop))\r\n        .subscribe(({ movement: { startPosition, endPosition, drop }, entities }) => {\r\n          const endDragPosition = this.coordinateConverter.screenToCartesian3(endPosition);\r\n          const startDragPosition = this.coordinateConverter.screenToCartesian3(startPosition);\r\n          if (!endDragPosition) {\r\n            return;\r\n          }\r\n\r\n          const update = {\r\n            id,\r\n            positions: this.getPositions(id),\r\n            editMode: EditModes.EDIT,\r\n            updatedPosition: endDragPosition,\r\n            draggedPosition: startDragPosition,\r\n            editAction: drop ? EditActions.DRAG_SHAPE_FINISH : EditActions.DRAG_SHAPE,\r\n          };\r\n          this.updateSubject.next(update);\r\n          editSubject.next({\r\n            ...update,\r\n            positions: this.getPositions(id),\r\n            points: this.getPoints(id),\r\n            width: this.getWidth(id),\r\n          });\r\n        });\r\n    }\r\n\r\n    const observables = [pointDragRegistration];\r\n    if (shapeDragRegistration) {\r\n      observables.push(shapeDragRegistration)\r\n    }\r\n\r\n    this.observablesMap.set(id, observables);\r\n    return this.createEditorObservable(editSubject, id);\r\n  }\r\n\r\n  private setOptions(options: HippodromeEditOptions): HippodromeEditOptions {\r\n    const defaultClone = JSON.parse(JSON.stringify(DEFAULT_HIPPODROME_OPTIONS));\r\n    const hippodromeOptions = Object.assign(defaultClone, options);\r\n    hippodromeOptions.hippodromeProps = Object.assign({}, DEFAULT_HIPPODROME_OPTIONS.hippodromeProps, options.hippodromeProps);\r\n    hippodromeOptions.pointProps = Object.assign({}, DEFAULT_HIPPODROME_OPTIONS.pointProps, options.pointProps);\r\n    return hippodromeOptions;\r\n  }\r\n\r\n\r\n  private createEditorObservable(observableToExtend: any, id: string): HippodromeEditorObservable {\r\n    observableToExtend.dispose = () => {\r\n      const observables = this.observablesMap.get(id);\r\n      if (observables) {\r\n        observables.forEach(obs => obs.dispose())\r\n      }\r\n      this.observablesMap.delete(id);\r\n      this.updateSubject.next({\r\n        id,\r\n        positions: this.getPositions(id),\r\n        editMode: EditModes.CREATE_OR_EDIT,\r\n        editAction: EditActions.DISPOSE,\r\n      });\r\n    };\r\n\r\n    observableToExtend.enable = () => {\r\n      this.updateSubject.next({\r\n        id,\r\n        positions: this.getPositions(id),\r\n        editMode: EditModes.EDIT,\r\n        editAction: EditActions.ENABLE,\r\n      });\r\n    };\r\n\r\n    observableToExtend.disable = () => {\r\n      this.updateSubject.next({\r\n        id,\r\n        positions: this.getPositions(id),\r\n        editMode: EditModes.EDIT,\r\n        editAction: EditActions.DISABLE,\r\n      });\r\n    };\r\n\r\n    observableToExtend.setManually = (firstPosition: Cartesian3,\r\n                                      secondPosition: Cartesian3,\r\n                                      widthMeters: number,\r\n                                      firstPointProp?: PointProps,\r\n                                      secondPointProp?: PointProps) => {\r\n      const firstP = new EditPoint(id, firstPosition, firstPointProp ? firstPointProp : DEFAULT_HIPPODROME_OPTIONS.pointProps);\r\n      const secP = new EditPoint(id, secondPosition, secondPointProp ? secondPointProp : DEFAULT_HIPPODROME_OPTIONS.pointProps);\r\n\r\n      const hippodrome = this.hippodromeManager.get(id);\r\n      hippodrome.setPointsManually([firstP, secP], widthMeters);\r\n      this.updateSubject.next({\r\n        id,\r\n        editMode: EditModes.CREATE_OR_EDIT,\r\n        editAction: EditActions.SET_MANUALLY,\r\n      });\r\n    };\r\n\r\n    observableToExtend.setLabelsRenderFn = (callback: any) => {\r\n      this.updateSubject.next({\r\n        id,\r\n        editMode: EditModes.CREATE_OR_EDIT,\r\n        editAction: EditActions.SET_EDIT_LABELS_RENDER_CALLBACK,\r\n        labelsRenderFn: callback,\r\n      })\r\n    };\r\n\r\n    observableToExtend.updateLabels = (labels: LabelProps[]) => {\r\n      this.updateSubject.next({\r\n        id,\r\n        editMode: EditModes.CREATE_OR_EDIT,\r\n        editAction: EditActions.UPDATE_EDIT_LABELS,\r\n        updateLabels: labels,\r\n      })\r\n    };\r\n\r\n    observableToExtend.getCurrentPoints = () => this.getPoints(id);\r\n    observableToExtend.getEditValue = () => observableToExtend.getValue();\r\n    observableToExtend.getLabels = (): LabelProps[] => this.hippodromeManager.get(id).labels;\r\n    observableToExtend.getCurrentWidth = (): number => this.getWidth(id);\r\n\r\n    return observableToExtend as HippodromeEditorObservable;\r\n  }\r\n\r\n  private generteId(): string {\r\n    return 'edit-hippodrome-' + this.counter++;\r\n  }\r\n\r\n  private getPositions(id: any) {\r\n    const hippodrome = this.hippodromeManager.get(id);\r\n    return hippodrome.getRealPositions()\r\n  }\r\n\r\n  private getPoints(id: any) {\r\n    const hippodrome = this.hippodromeManager.get(id);\r\n    return hippodrome.getRealPoints();\r\n  }\r\n\r\n  private getWidth(id: string) {\r\n    const hippodrome = this.hippodromeManager.get(id);\r\n    return hippodrome.getWidth();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}