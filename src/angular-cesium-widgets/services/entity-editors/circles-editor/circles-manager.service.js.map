{"version":3,"sources":["circles-manager.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,cAAA,EAAe,MAAO,iCAAA,CAAkC;AAKjE;IAAA;QACU,YAAO,GAAG,IAAI,GAAG,EAA0B,CAAC;IA+BtD,CAAC;IA7BC,oDAAoB,GAApB,UAAqB,EAAU,EACV,gBAAkC,EAClC,eAAiC,EACjC,aAA+B,EAC/B,aAAgC;QACnD,IAAM,cAAc,GAAG,IAAI,cAAc,CAAC,EAAE,EAAE,gBAAgB,EAAE,eAAe,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;QAC/G,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;QACrC,MAAM,CAAC,cAAc,CAAC;IACxB,CAAC;IAED,uCAAO,GAAP,UAAQ,EAAU;QAChB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QAC/B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED,mCAAG,GAAH,UAAI,EAAU;QACZ,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC9B,CAAC;IAED,qCAAK,GAAL;QACE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,OAAO,EAAE,EAAhB,CAAgB,CAAC,CAAC;QACjD,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IACI,gCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IAEK,oCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,4BAAC;CAhCD,AAgCC,IAAA;SAhCY,qBAAqB","file":"circles-manager.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { EditableCircle } from '../../../models/editable-circle';\r\nimport { AcLayerComponent } from '../../../../angular-cesium/components/ac-layer/ac-layer.component';\r\nimport { CircleEditOptions } from '../../../models/circle-edit-options';\r\n\r\n\r\nexport class CirclesManagerService {\r\n  private circles = new Map<string, EditableCircle>();\r\n\r\n  createEditableCircle(id: string,\r\n                       editCirclesLayer: AcLayerComponent,\r\n                       editPointsLayer: AcLayerComponent,\r\n                       editArcsLayer: AcLayerComponent,\r\n                       circleOptions: CircleEditOptions): EditableCircle {\r\n    const editableCircle = new EditableCircle(id, editCirclesLayer, editPointsLayer, editArcsLayer, circleOptions);\r\n    this.circles.set(id, editableCircle);\r\n    return editableCircle;\r\n  }\r\n\r\n  dispose(id: string) {\r\n    this.circles.get(id).dispose();\r\n    this.circles.delete(id);\r\n  }\r\n\r\n  get(id: string): EditableCircle {\r\n    return this.circles.get(id);\r\n  }\r\n\r\n  clear() {\r\n    this.circles.forEach(circle => circle.dispose());\r\n    this.circles.clear();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}