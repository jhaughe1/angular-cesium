{"version":3,"sources":["circles-editor.service.ts"],"names":[],"mappings":"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","file":"circles-editor.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { MapEventsManagerService } from '../../../../angular-cesium/services/map-events-mananger/map-events-manager';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { CesiumEvent } from '../../../../angular-cesium/services/map-events-mananger/consts/cesium-event.enum';\r\nimport { PickOptions } from '../../../../angular-cesium/services/map-events-mananger/consts/pickOptions.enum';\r\nimport { EditModes } from '../../../models/edit-mode.enum';\r\nimport { EditActions } from '../../../models/edit-actions.enum';\r\nimport { DisposableObservable } from '../../../../angular-cesium/services/map-events-mananger/disposable-observable';\r\nimport { CoordinateConverter } from '../../../../angular-cesium/services/coordinate-converter/coordinate-converter.service';\r\nimport { EditPoint } from '../../../models/edit-point';\r\nimport { CameraService } from '../../../../angular-cesium/services/camera/camera.service';\r\nimport { Cartesian3 } from '../../../../angular-cesium/models/cartesian3';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { CircleEditUpdate } from '../../../models/circle-edit-update';\r\nimport { GeoUtilsService } from '../../../../angular-cesium/services/geo-utils/geo-utils.service';\r\nimport { CirclesManagerService } from './circles-manager.service';\r\nimport { CircleEditorObservable } from '../../../models/circle-editor-observable';\r\nimport { CircleEditOptions, CircleProps } from '../../../models/circle-edit-options';\r\nimport { EditableCircle } from '../../../models/editable-circle';\r\nimport { PointProps } from '../../../models/polyline-edit-options';\r\nimport { LabelProps } from '../../../models/label-props';\r\nimport {BasicEditUpdate} from '../../../models/basic-edit-update';\r\n\r\n\r\n\r\nexport const DEFAULT_CIRCLE_OPTIONS: CircleEditOptions = {\r\n  addPointEvent : CesiumEvent.LEFT_CLICK,\r\n  dragPointEvent : CesiumEvent.LEFT_CLICK_DRAG,\r\n  dragShapeEvent : CesiumEvent.LEFT_CLICK_DRAG,\r\n  allowDrag : true,\r\n  circleProps : {\r\n    material : Cesium.Color.GREEN.withAlpha(0.5),\r\n    outline : false,\r\n    outlineWidth : 1,\r\n    outlineColor : Cesium.Color.BLACK,\r\n  },\r\n  pointProps : {\r\n    color : Cesium.Color.WHITE,\r\n    outlineColor : Cesium.Color.BLACK,\r\n    outlineWidth : 1,\r\n    pixelSize: 15,\r\n    virtualPointPixelSize: 8,\r\n    show: true,\r\n    showVirtual: true,\r\n  },\r\n  polylineProps : {\r\n    width : 1,\r\n    material : () => Cesium.Color.BLACK,\r\n  }\r\n};\r\n\r\n/**\r\n * Service for creating editable circles\r\n *\r\n * You must provide `CircleEditorService` yourself.\r\n * PolygonsEditorService works together with `<circle-editor>` component. Therefor you need to create `<circle-editor>`\r\n * for each `CircleEditorService`, And of course somewhere under `<ac-map>`/\r\n *\r\n * + `create` for starting a creation of the shape over the map. Returns a extension of `CircleEditorObservable`.\r\n * + `edit` for editing shape over the map starting from a given positions. Returns an extension of `CircleEditorObservable`.\r\n * + To stop editing call `dsipose()` from the `CircleEditorObservable` you get back from `create()` \\ `edit()`.\r\n *\r\n * **Labels over editted shapes**\r\n * Angular Cesium allows you to draw labels over a shape that is being edited with one of the editors.\r\n * To add label drawing logic to your editor use the function `setLabelsRenderFn()` that is defined on the\r\n * `CircleEditorObservable` that is returned from calling `create()` \\ `edit()` of one of the editor services.\r\n * `setLabelsRenderFn()` - receives a callback that is called every time the shape is redrawn\r\n * (except when the shape is being dragged). The callback is called with the last shape state and with an array of the current labels.\r\n * The callback should return type `LabelProps[]`.\r\n * You can also use `updateLabels()` to pass an array of labels of type `LabelProps[]` to be drawn.\r\n *\r\n * usage:\r\n * ```typescript\r\n *  // Start creating circle\r\n *  const editing$ = circlesEditorService.create();\r\n *  this.editing$.subscribe(editResult => {\r\n *\t\t\t\tconsole.log(editResult.positions);\r\n *\t\t});\r\n *\r\n *  // Or edit circle from existing center point and radius\r\n *  const editing$ = this.circlesEditorService.edit(center, radius);\r\n *\r\n * ```\r\n */\r\n\r\nexport class CirclesEditorService {\r\n  private mapEventsManager: MapEventsManagerService;\r\n  private updateSubject = new Subject<CircleEditUpdate>();\r\n  private updatePublisher = this.updateSubject.publish(); // TODO maybe not needed\r\n  private counter = 0;\r\n  private coordinateConverter: CoordinateConverter;\r\n  private cameraService: CameraService;\r\n  private circlesManager: CirclesManagerService;\r\n  private observablesMap = new Map<string, DisposableObservable<any>[]>();\r\n  \r\n  init(mapEventsManager: MapEventsManagerService,\r\n       coordinateConverter: CoordinateConverter,\r\n       cameraService: CameraService,\r\n       circlesManager: CirclesManagerService) {\r\n    this.mapEventsManager = mapEventsManager;\r\n    this.updatePublisher.connect();\r\n    this.coordinateConverter = coordinateConverter;\r\n    this.cameraService = cameraService;\r\n    this.circlesManager = circlesManager;\r\n  }\r\n  \r\n  onUpdate(): Observable<CircleEditUpdate> {\r\n    return this.updatePublisher;\r\n  }\r\n  \r\n  create(options = DEFAULT_CIRCLE_OPTIONS, priority = 100): CircleEditorObservable {\r\n    let center: any = undefined;\r\n    const id = this.generteId();\r\n    const circleOptions = this.setOptions(options);\r\n    const clientEditSubject = new BehaviorSubject<CircleEditUpdate>({\r\n      id,\r\n      editAction : null,\r\n      editMode : EditModes.CREATE\r\n    });\r\n    let finishedCreate = false;\r\n    \r\n    this.updateSubject.next({\r\n      id,\r\n      editMode : EditModes.CREATE,\r\n      editAction : EditActions.INIT,\r\n      circleOptions,\r\n    });\r\n    \r\n    const mouseMoveRegistration = this.mapEventsManager.register({\r\n      event : CesiumEvent.MOUSE_MOVE,\r\n      pick : PickOptions.NO_PICK,\r\n      priority,\r\n    });\r\n    const addPointRegistration = this.mapEventsManager.register({\r\n      event : CesiumEvent.LEFT_CLICK,\r\n      pick : PickOptions.NO_PICK,\r\n      priority,\r\n    });\r\n    \r\n    this.observablesMap.set(id, [mouseMoveRegistration, addPointRegistration]);\r\n    const editorObservable = this.createEditorObservable(clientEditSubject, id);\r\n    \r\n    addPointRegistration.subscribe(({movement : {endPosition}}) => {\r\n      if (finishedCreate) {\r\n        return;\r\n      }\r\n      const position = this.coordinateConverter.screenToCartesian3(endPosition);\r\n      if (!position) {\r\n        return;\r\n      }\r\n      \r\n      if (!center) {\r\n        const update = {\r\n          id,\r\n          center : position,\r\n          editMode : EditModes.CREATE,\r\n          editAction : EditActions.ADD_POINT,\r\n        };\r\n        this.updateSubject.next(update);\r\n        clientEditSubject.next({\r\n          ...update,\r\n          ...this.getCircleProperties(id),\r\n        });\r\n        center = position;\r\n      }\r\n      \r\n      else {\r\n        const update = {\r\n          id,\r\n          center,\r\n          radiusPoint : position,\r\n          editMode : EditModes.CREATE,\r\n          editAction : EditActions.ADD_LAST_POINT,\r\n        };\r\n        this.updateSubject.next(update);\r\n        clientEditSubject.next({\r\n          ...update,\r\n          ...this.getCircleProperties(id),\r\n        });\r\n        \r\n        const changeMode = {\r\n          id,\r\n          center,\r\n          radiusPoint : position,\r\n          editMode : EditModes.CREATE,\r\n          editAction : EditActions.CHANGE_TO_EDIT,\r\n        };\r\n        \r\n        this.updateSubject.next(changeMode);\r\n        clientEditSubject.next({\r\n          ...update,\r\n          ...this.getCircleProperties(id),\r\n        });\r\n        if (this.observablesMap.has(id)) {\r\n          this.observablesMap.get(id).forEach(registration => registration.dispose());\r\n        }\r\n        this.observablesMap.delete(id);\r\n        this.editCircle(id, priority, clientEditSubject, circleOptions, editorObservable);\r\n        finishedCreate = true;\r\n      }\r\n    });\r\n    \r\n    mouseMoveRegistration.subscribe(({movement : {endPosition}}) => {\r\n      if (!center) {\r\n        return;\r\n      }\r\n      const position = this.coordinateConverter.screenToCartesian3(endPosition);\r\n      \r\n      if (position) {\r\n        const update = {\r\n          id,\r\n          center,\r\n          radiusPoint : position,\r\n          editMode : EditModes.CREATE,\r\n          editAction : EditActions.MOUSE_MOVE,\r\n        };\r\n        this.updateSubject.next(update);\r\n        clientEditSubject.next({\r\n          ...update,\r\n          ...this.getCircleProperties(id),\r\n        });\r\n      }\r\n    });\r\n    \r\n    return editorObservable;\r\n  }\r\n  \r\n  edit(center: Cartesian3, radius: number, options = DEFAULT_CIRCLE_OPTIONS, priority = 100): CircleEditorObservable {\r\n    const id = this.generteId();\r\n    const circleOptions = this.setOptions(options);\r\n    const editSubject = new BehaviorSubject<CircleEditUpdate>({\r\n      id,\r\n      editAction : null,\r\n      editMode : EditModes.EDIT\r\n    });\r\n    \r\n    const radiusPoint: Cartesian3 = GeoUtilsService.pointByLocationDistanceAndAzimuth(center, radius, Math.PI / 2, true);\r\n    \r\n    const update = {\r\n      id,\r\n      center,\r\n      radiusPoint,\r\n      editMode : EditModes.EDIT,\r\n      editAction : EditActions.INIT,\r\n      circleOptions,\r\n    };\r\n    this.updateSubject.next(update);\r\n    editSubject.next({\r\n      ...update,\r\n      ...this.getCircleProperties(id),\r\n    });\r\n    \r\n    return this.editCircle(\r\n      id,\r\n      priority,\r\n      editSubject,\r\n      circleOptions\r\n    )\r\n  }\r\n  \r\n  private editCircle(id: string,\r\n                     priority: number,\r\n                     editSubject: Subject<CircleEditUpdate>,\r\n                     options: CircleEditOptions,\r\n                     editObservable?: CircleEditorObservable): CircleEditorObservable {\r\n    \r\n    const pointDragRegistration = this.mapEventsManager.register({\r\n      event : CesiumEvent.LEFT_CLICK_DRAG,\r\n      entityType : EditPoint,\r\n      pick : PickOptions.PICK_FIRST,\r\n      priority,\r\n    });\r\n    \r\n    let shapeDragRegistration;\r\n    if (options.allowDrag) {\r\n      shapeDragRegistration = this.mapEventsManager.register({\r\n        event : CesiumEvent.LEFT_CLICK_DRAG,\r\n        entityType : EditableCircle,\r\n        pick : PickOptions.PICK_FIRST,\r\n        priority : priority,\r\n      });\r\n    }\r\n    \r\n    pointDragRegistration\r\n      .do(({movement : {drop}}) => this.cameraService.enableInputs(drop))\r\n      .subscribe(({movement : {endPosition, startPosition, drop}, entities}) => {\r\n        const startDragPosition = this.coordinateConverter.screenToCartesian3(startPosition);\r\n        const endDragPosition = this.coordinateConverter.screenToCartesian3(endPosition);\r\n        if (!endDragPosition) {\r\n          return;\r\n        }\r\n        \r\n        const point: EditPoint = entities[0];\r\n        const pointIsCenter = point === this.getCenterPoint(id);\r\n        let editAction;\r\n        if (drop) {\r\n          editAction = pointIsCenter ? EditActions.DRAG_SHAPE_FINISH : EditActions.DRAG_POINT_FINISH;\r\n        }\r\n        else {\r\n          editAction = pointIsCenter ? EditActions.DRAG_SHAPE : EditActions.DRAG_POINT;\r\n        }\r\n        \r\n        if (!options.allowDrag && (editAction === EditActions.DRAG_SHAPE || editAction === EditActions.DRAG_SHAPE_FINISH)) {\r\n          this.cameraService.enableInputs(true);\r\n          return;\r\n        }\r\n        \r\n        const update = {\r\n          id,\r\n          center : this.getCenterPosition(id),\r\n          radiusPoint : this.getRadiusPosition(id),\r\n          startDragPosition,\r\n          endDragPosition,\r\n          editMode : EditModes.EDIT,\r\n          editAction,\r\n        };\r\n        this.updateSubject.next(update);\r\n        editSubject.next({\r\n          ...update,\r\n          ...this.getCircleProperties(id),\r\n        });\r\n      });\r\n    \r\n    if (shapeDragRegistration) {\r\n      shapeDragRegistration\r\n        .do(({movement : {drop}}) => this.cameraService.enableInputs(drop))\r\n        .subscribe(({movement : {startPosition, endPosition, drop}}) => {\r\n          const startDragPosition = this.coordinateConverter.screenToCartesian3(startPosition);\r\n          const endDragPosition = this.coordinateConverter.screenToCartesian3(endPosition);\r\n          if (!endDragPosition || !startDragPosition) {\r\n            return;\r\n          }\r\n          \r\n          const update = {\r\n            id,\r\n            center : this.getCenterPosition(id),\r\n            radiusPoint : this.getRadiusPosition(id),\r\n            startDragPosition,\r\n            endDragPosition,\r\n            editMode : EditModes.EDIT,\r\n            editAction : drop ? EditActions.DRAG_SHAPE_FINISH : EditActions.DRAG_SHAPE,\r\n          };\r\n          this.updateSubject.next(update);\r\n          editSubject.next({\r\n            ...update,\r\n            ...this.getCircleProperties(id),\r\n          });\r\n        });\r\n    }\r\n    \r\n    const observables = [pointDragRegistration];\r\n    if (shapeDragRegistration) {\r\n      observables.push(shapeDragRegistration)\r\n    }\r\n    \r\n    this.observablesMap.set(id, observables);\r\n    return editObservable || this.createEditorObservable(editSubject, id);\r\n  }\r\n  \r\n  \r\n  private createEditorObservable(observableToExtend: any, id: string): CircleEditorObservable {\r\n    observableToExtend.dispose = () => {\r\n      const observables = this.observablesMap.get(id);\r\n      if (observables) {\r\n        observables.forEach(obs => obs.dispose())\r\n      }\r\n      this.observablesMap.delete(id);\r\n      this.updateSubject.next({\r\n        id,\r\n        center : this.getCenterPosition(id),\r\n        radiusPoint : this.getRadiusPosition(id),\r\n        editMode : EditModes.CREATE_OR_EDIT,\r\n        editAction : EditActions.DISPOSE,\r\n      });\r\n    };\r\n    \r\n    observableToExtend.enable = () => {\r\n      this.updateSubject.next({\r\n        id,\r\n        center : this.getCenterPosition(id),\r\n        radiusPoint : this.getRadiusPosition(id),\r\n        editMode : EditModes.EDIT,\r\n        editAction : EditActions.ENABLE,\r\n      });\r\n    };\r\n    \r\n    observableToExtend.disable = () => {\r\n      this.updateSubject.next({\r\n        id,\r\n        center : this.getCenterPosition(id),\r\n        radiusPoint : this.getRadiusPosition(id),\r\n        editMode : EditModes.EDIT,\r\n        editAction : EditActions.DISABLE,\r\n      });\r\n    };\r\n    \r\n    observableToExtend.setManually = (center: Cartesian3, radius: number, centerPointProp?: PointProps,\r\n                                      radiusPointProp?: PointProps, circleProp?: CircleProps) => {\r\n      const radiusPoint = GeoUtilsService.pointByLocationDistanceAndAzimuth(center, radius, Math.PI / 2, true);\r\n      const circle = this.circlesManager.get(id);\r\n      circle.setManually(center, radiusPoint, centerPointProp, radiusPointProp, circleProp);\r\n      this.updateSubject.next({\r\n        id,\r\n        editMode: EditModes.CREATE_OR_EDIT,\r\n        editAction: EditActions.SET_MANUALLY,\r\n      });\r\n    };\r\n\r\n    observableToExtend.setLabelsRenderFn = (callback: (update: BasicEditUpdate<any>, labels: LabelProps[]) => LabelProps[]) => {\r\n      this.updateSubject.next({\r\n        id,\r\n        editMode: EditModes.CREATE_OR_EDIT,\r\n        editAction: EditActions.SET_EDIT_LABELS_RENDER_CALLBACK,\r\n        labelsRenderFn: callback,\r\n      })\r\n    };\r\n\r\n    observableToExtend.updateLabels = (labels: LabelProps[]) => {\r\n      this.updateSubject.next({\r\n        id,\r\n        editMode: EditModes.CREATE_OR_EDIT,\r\n        editAction: EditActions.UPDATE_EDIT_LABELS,\r\n        updateLabels: labels,\r\n      })\r\n    };\r\n    \r\n    observableToExtend.getEditValue = () => observableToExtend.getValue();\r\n\r\n    observableToExtend.getLabels = (): LabelProps[] => this.circlesManager.get(id).labels;\r\n    observableToExtend.getCenter = (): Cartesian3 => this.getCenterPosition(id);\r\n    observableToExtend.getRadius =  (): number => this.getRadius(id);\r\n\r\n    return observableToExtend as CircleEditorObservable;\r\n  }\r\n  \r\n  private setOptions(options: CircleEditOptions): CircleEditOptions {\r\n    const defaultClone = JSON.parse(JSON.stringify(DEFAULT_CIRCLE_OPTIONS));\r\n    const circleOptions = Object.assign(defaultClone, options);\r\n    circleOptions.pointProps = Object.assign({}, DEFAULT_CIRCLE_OPTIONS.pointProps, options.pointProps);\r\n    circleOptions.circleProps = Object.assign({}, DEFAULT_CIRCLE_OPTIONS.circleProps, options.circleProps);\r\n    circleOptions.polylineProps = Object.assign({}, DEFAULT_CIRCLE_OPTIONS.polylineProps, options.polylineProps);\r\n    return circleOptions;\r\n  }\r\n  \r\n  private getCenterPosition(id: string): Cartesian3 {\r\n    return this.circlesManager.get(id).getCenter();\r\n  }\r\n  \r\n  private getCenterPoint(id: string): EditPoint {\r\n    return this.circlesManager.get(id).center;\r\n  }\r\n  \r\n  private getRadiusPosition(id: string): Cartesian3 {\r\n    return this.circlesManager.get(id).getRadiusPoint();\r\n  }\r\n  \r\n  private getRadius(id: string): number {\r\n    return this.circlesManager.get(id).getRadius();\r\n  }\r\n  \r\n  private getCircleProperties(id: string) {\r\n    const circle = this.circlesManager.get(id);\r\n    return {\r\n      center : circle.getCenter(),\r\n      radiusPoint : circle.getRadiusPoint(),\r\n      radius : circle.getRadius()\r\n    }\r\n  }\r\n  \r\n  private generteId(): string {\r\n    return 'edit-circle-' + this.counter++;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}