{"version":3,"sources":["ac-default-plonter.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,uBAAA,EAAyB,iBAAA,EAAmB,SAAA,EAAkB,MAAO,eAAA,CAAgB;AAC9F,OAAO,EAAE,cAAA,EAAe,MAAO,wCAAA,CAAyC;AACxE,OAAO,EAAE,mBAAA,EAAoB,MAAO,kEAAA,CAAmE;AAGvG;IAEE,mCAAmB,cAA8B,EAC7B,EAAqB,EACrB,YAAiC;QAFlC,mBAAc,GAAd,cAAc,CAAgB;QAC7B,OAAE,GAAF,EAAE,CAAmB;QACrB,iBAAY,GAAZ,YAAY,CAAqB;IACrD,CAAC;IAED,4CAAQ,GAAR;QAAA,iBAEC;QADC,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,EAAE,CAAC,aAAa,EAAE,EAAvB,CAAuB,CAAC,CAAC;IACrF,CAAC;IAED,sBAAI,sDAAe;aAAnB;YACE,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC;gBACrC,IAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,WAAW,CAAC;gBACvE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAC/D,CAAC;QACH,CAAC;;;OAAA;IAED,gDAAY,GAAZ,UAAa,MAAW;QACtB,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IAC7C,CAAC;IACI,oCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACtB,QAAQ,EAAG,oBAAoB;oBAC/B,QAAQ,EAAG,4cAWV;oBACD,MAAM,EAAG,CAAC,qZAgBT,CAAC;oBACF,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,SAAS,EAAG,CAAC,mBAAmB,CAAC;iBAClC,EAAG,EAAE;KACP,CAAC;IAEK,wCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,cAAc,GAAG;QACxB,EAAC,IAAI,EAAE,iBAAiB,GAAG;QAC3B,EAAC,IAAI,EAAE,mBAAmB,GAAG;KAC5B,EAJ6F,CAI7F,CAAC;IACF,gCAAC;CA/DD,AA+DC,IAAA;SA/DY,yBAAyB","file":"ac-default-plonter.component.js","sourceRoot":"","sourcesContent":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { PlonterService } from '../../services/plonter/plonter.service';\r\nimport { CoordinateConverter } from '../../services/coordinate-converter/coordinate-converter.service';\r\n\r\n\r\nexport class AcDefaultPlonterComponent implements OnInit {\r\n  \r\n  constructor(public plonterService: PlonterService,\r\n              private cd: ChangeDetectorRef,\r\n              private geoConverter: CoordinateConverter) {\r\n  }\r\n  \r\n  ngOnInit() {\r\n    this.plonterService.plonterChangeNotifier.subscribe(() => this.cd.detectChanges());\r\n  }\r\n  \r\n  get plonterPosition() {\r\n    if (this.plonterService.plonterShown) {\r\n      const screenPos = this.plonterService.plonterClickPosition.endPosition;\r\n      return this.geoConverter.screenToCartesian3(screenPos, true);\r\n    }\r\n  }\r\n  \r\n  chooseEntity(entity: any) {\r\n    this.plonterService.resolvePlonter(entity);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector : 'ac-default-plonter',\r\n    template : `\r\n        <ac-html *ngIf=\"plonterService.plonterShown\" [props]=\"{\r\n        position: plonterPosition\r\n      }\">\r\n            <div class=\"plonter-context-menu\">\r\n                <div *ngFor=\"let entity of plonterService.entitesToPlonter\">\r\n                    <div class=\"plonter-item\" (click)=\"chooseEntity(entity)\">{{ entity?.name || entity?.id }}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </ac-html>\r\n    `,\r\n    styles : [`\r\n        .plonter-context-menu {\r\n            background-color: rgba(250, 250, 250, 0.8);\r\n            box-shadow: 1px 1px 5px 0px rgba(0, 0, 0, 0.15);\r\n        }\r\n\r\n        .plonter-item {\r\n            cursor: pointer;\r\n            padding: 2px 15px;\r\n            text-align: start;\r\n        }\r\n\r\n        .plonter-item:hover {\r\n            background-color: rgba(0, 0, 0, 0.15);\r\n        }\r\n    \r\n    `],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers : [CoordinateConverter],\r\n  }, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: PlonterService, },\n{type: ChangeDetectorRef, },\n{type: CoordinateConverter, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}