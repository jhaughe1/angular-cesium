{"version":3,"sources":["ac-context-menu-wrapper.component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,uBAAuB,EACvB,iBAAiB,EACjB,SAAS,EACT,wBAAwB,EAGxB,SAAS,EACT,gBAAgB,EACjB,MAAM,eAAA,CAAgB;AACvB,OAAO,EAAE,kBAAA,EAAmB,MAAO,kDAAA,CAAmD;AA8BtF;IAOE,uCAAmB,kBAAsC,EACrC,EAAqB,EACrB,wBAAkD;QAFnD,uBAAkB,GAAlB,kBAAkB,CAAoB;QACrC,OAAE,GAAF,EAAE,CAAmB;QACrB,6BAAwB,GAAxB,wBAAwB,CAA0B;IACtE,CAAC;IAED,gDAAQ,GAAR;QAAA,iBAWC;QAVC,IAAI,CAAC,6BAA6B;YAChC,IAAI,CAAC,kBAAkB,CAAC,yBAAyB,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,EAAE,CAAC,aAAa,EAAE,EAAvB,CAAuB,CAAC,CAAC;QAC7F,IAAI,CAAC,2BAA2B;YAC9B,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,SAAS,CAAC;gBACvC,IAAM,gBAAgB,GAAG,KAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,KAAI,CAAC,kBAAkB,CAAC,OAAc,CAAC,CAAC;gBACvH,KAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;gBAC9B,IAAM,YAAY,GAAG,KAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;gBAC5E,YAAY,CAAC,QAA6B,CAAC,IAAI,GAAG,KAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC;gBACxF,KAAI,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC;YAC1B,CAAC,CAAC,CAAA;IACN,CAAC;IAED,mDAAW,GAAX;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC,CAAC;YACvC,IAAI,CAAC,6BAA6B,CAAC,WAAW,EAAE,CAAC;QACnD,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,2BAA2B,CAAC,WAAW,EAAE,CAAC;QACjD,CAAC;IACH,CAAC;IACI,wCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,yBAAyB;oBACnC,QAAQ,EAAE,uLAIT;oBACD,MAAM,EAAE,EAAE;oBACV,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD,EAAG,EAAE;KACL,CAAC;IAEK,4CAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,kBAAkB,GAAG;QAC5B,EAAC,IAAI,EAAE,iBAAiB,GAAG;QAC3B,EAAC,IAAI,EAAE,wBAAwB,GAAG;KACjC,EAJ6F,CAI7F,CAAC;IACK,4CAAc,GAA2C;QAChE,kBAAkB,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,sBAAsB,EAAE,EAAE,IAAI,EAAE,gBAAgB,EAAE,EAAG,EAAE,EAAE;KACvG,CAAC;IACF,oCAAC;CAvDD,AAuDC,IAAA;SAvDY,6BAA6B","file":"ac-context-menu-wrapper.component.js","sourceRoot":"","sourcesContent":["import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ComponentFactoryResolver,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\nimport { ContextMenuService } from '../../services/context-menu/context-menu.service';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { BasicContextMenu } from '../../models/basic-context-menu';\r\n\r\n/**\r\n * This component is used to inject the component that is passed to the ContextMenuService when opening a context menu.\r\n * It shouldn't be used directly.\r\n *\r\n * usage:\r\n * ```typescript\r\n * // We want to open the context menu on mouse right click.\r\n * // Register to mouse right click with the MapEventsManager\r\n * this.mapEventsManager.register({ event: CesiumEvent.RIGHT_CLICK, pick: PickOptions.NO_PICK })\r\n *    .subscribe(event => {\r\n *       const position = this.coordinateConverter.screenToCartesian3(event.movement.endPosition, true);\r\n *       if (!position) {\r\n *         return;\r\n *       }\r\n *       // Open the context menu on the position that was clicked and pass some data to ContextMenuComponent.\r\n *       this.contextMenuService.open(\r\n *         ContextMenuComponent,\r\n *         position,\r\n *         { data: { items: ['New Track', 'Change Map', 'Context Menu', 'Do Something'] } }\r\n *       )\r\n *    });\r\n *\r\n * ```\r\n */\r\n\r\n\r\nexport class AcContextMenuWrapperComponent implements OnInit, OnDestroy {\r\n\r\n  private contextMenuChangeSubscription: Subscription;\r\n  private contextMenuOpenSubscription: Subscription;\r\n\r\n   viewContainerRef: ViewContainerRef;\r\n\r\n  constructor(public contextMenuService: ContextMenuService,\r\n              private cd: ChangeDetectorRef,\r\n              private componentFactoryResolver: ComponentFactoryResolver) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.contextMenuChangeSubscription =\r\n      this.contextMenuService.contextMenuChangeNotifier.subscribe(() => this.cd.detectChanges());\r\n    this.contextMenuOpenSubscription =\r\n      this.contextMenuService.onOpen.subscribe(() => {\r\n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.contextMenuService.content as any);\r\n        this.viewContainerRef.clear();\r\n        const componentRef = this.viewContainerRef.createComponent(componentFactory);\r\n        (componentRef.instance as BasicContextMenu).data = this.contextMenuService.options.data;\r\n        this.cd.detectChanges();\r\n      })\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.contextMenuChangeSubscription) {\r\n      this.contextMenuChangeSubscription.unsubscribe();\r\n    }\r\n\r\n    if (this.contextMenuOpenSubscription) {\r\n      this.contextMenuOpenSubscription.unsubscribe();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'ac-context-menu-wrapper',\r\n  template: `\r\n      <ac-html *ngIf=\"contextMenuService.showContextMenu\" [props]=\"{position: contextMenuService.position}\">\r\n          <div #contextMenuContainer></div>\r\n      </ac-html>\r\n  `,\r\n  styles: [],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ContextMenuService, },\n{type: ChangeDetectorRef, },\n{type: ComponentFactoryResolver, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'viewContainerRef': [{ type: ViewChild, args: ['contextMenuContainer', { read: ViewContainerRef }, ] },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}