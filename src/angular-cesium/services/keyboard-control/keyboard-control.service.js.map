{"version":3,"sources":["keyboard-control.service.ts"],"names":[],"mappings":"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","file":"keyboard-control.service.js","sourceRoot":"","sourcesContent":["import { isNumber } from 'util';\r\nimport { Inject, Injectable, NgZone } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { KeyboardAction } from '../../models/ac-keyboard-action.enum';\r\nimport { CesiumService } from '../cesium/cesium.service';\r\nimport { PREDEFINED_KEYBOARD_ACTIONS } from './predefined-actions';\r\n\r\nexport type KeyboardControlActionFn = (cesiumService: CesiumService, params: any, event: KeyboardEvent) => boolean | void;\r\nexport type KeyboardControlValidationFn = (cesiumService: CesiumService, params: any, event: KeyboardEvent) => boolean;\r\nexport type KeyboardControlDoneFn = (cesiumService: CesiumService, event: KeyboardEvent) => boolean;\r\n\r\nexport interface KeyboardControlParams {\r\n\taction: KeyboardAction | KeyboardControlActionFn;\r\n\tvalidation?: KeyboardControlValidationFn;\r\n\tparams?: { [paramName: string]: any };\r\n\tdone?: KeyboardControlDoneFn;\r\n}\r\n\r\nexport interface KeyboardControlDefinition {\r\n\t[keyboardCharCode: string]: KeyboardControlParams;\r\n}\r\n\r\nenum KeyEventState {\r\n\tIGNORED,\r\n\tNOT_PRESSED,\r\n\tPRESSED,\r\n}\r\n\r\ninterface ActiveDefinition {\r\n\tkeyboardEvent: KeyboardEvent,\r\n\tstate: KeyEventState,\r\n\taction: KeyboardControlParams\r\n}\r\n\r\n/**\r\n *  Service that manages keyboard keys and execute actions per request.\r\n *  Inject the keyboard control service into any layer, under your `ac-map` component,\r\n *  And defined you keyboard handlers using `setKeyboardControls`.\r\n *\r\n * <caption>Simple Example</caption>\r\n * ```typescript\r\n * Component({\r\n *   selector: 'keyboard-control-layer',\r\n *   template: '',\r\n * })\r\n * export class KeyboardControlLayerComponent implements OnInit, OnDestroy {\r\n *   constructor(private keyboardControlService: KeyboardControlService) {}\r\n *\r\n *   ngOnInit() {\r\n *     this.keyboardControlService.setKeyboardControls({\r\n *       W: { action: KeyboardAction.CAMERA_FORWARD },\r\n *       S: { action: KeyboardAction.CAMERA_BACKWARD },\r\n *       D: { action: KeyboardAction.CAMERA_RIGHT },\r\n *       A: { action: KeyboardAction.CAMERA_LEFT },\r\n *     });\r\n *    }\r\n *\r\n *   ngOnDestroy() {\r\n *     this.keyboardControlService.removeKeyboardControls();\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * <caption>Advanced Example</caption>\r\n * ```typescript\r\n * Component({\r\n *   selector: 'keyboard-control-layer',\r\n *   template: '',\r\n * })\r\n * export class KeyboardControlLayerComponent implements OnInit, OnDestroy {\r\n *   constructor(private keyboardControlService: KeyboardControlService) {}\r\n *\r\n *   private myCustomValue = 10;\r\n *\r\n *   ngOnInit() {\r\n *     this.keyboardControlService.setKeyboardControls({\r\n *       W: {\r\n *          action: KeyboardAction.CAMERA_FORWARD,\r\n *          validate: (camera, scene, params, key) => {\r\n *            // Replace `checkCamera` you with your validation logic\r\n *            if (checkCamera(camera) || params.customParams === true) {\r\n *              return true;\r\n *            }\r\n *\r\n *            return false;\r\n *          },\r\n *          params: () => {\r\n *            return {\r\n *              myValue: this.myCustomValue,\r\n *            };\r\n *          },\r\n *        }\r\n *     });\r\n *    }\r\n *\r\n *   ngOnDestroy() {\r\n *     this.keyboardControlService.removeKeyboardControls();\r\n *   }\r\n * }\r\n * ```\r\n *\r\n */\r\n\r\nexport class KeyboardControlService {\r\n\tprivate _currentDefinitions: KeyboardControlDefinition = null;\r\n\tprivate _activeDefinitions: { [definitionKey: string]: ActiveDefinition } = {};\r\n\tprivate _keyMappingFn: Function = this.defaultKeyMappingFn;\r\n\t\r\n\t/**\r\n\t * Creats the keyboard control service.\r\n\t * @constructor\r\n\t */\r\n\tconstructor(private ngZone: NgZone, private cesiumService: CesiumService,  private document: any) {\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initializes the keyboard control service.\r\n\t * @constructor\r\n\t */\r\n\tinit() {\r\n\t\tconst canvas = this.cesiumService.getCanvas();\r\n\t\tcanvas.addEventListener('click', () => {\r\n\t\t\tcanvas.focus();\r\n\t\t});\r\n\t\t\r\n\t\tthis.handleKeydown = this.handleKeydown.bind(this);\r\n\t\tthis.handleKeyup = this.handleKeyup.bind(this);\r\n\t\tthis.handleTick = this.handleTick.bind(this);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Sets the current map keyboard control definitions.\r\n\t * The definitions is a key mapping between a key string and a KeyboardControlDefinition:\r\n\t * - `action` is a predefine action from `KeyboardAction` enum, or a custom method:\r\n\t * `(camera, scene, params, key) => boolean | void` - returning false will cancel the current keydown.\r\n\t * - `validation` is a method that validates if the event should occur or not (`camera, scene, params, key`)\r\n\t * - `params` is an object (or function that returns object) that will be passed into the action executor.\r\n\t * - `done` is a function that will be triggered when `keyup` is triggered.\r\n\t * @param {KeyboardControlDefinition} definitions\r\n\t * @param {Function} keyMappingFn - Mapping function for custom keys\r\n\t * @param {Boolean} outsideOfAngularZone - if key down events will run outside of angular zone.\r\n\t */\r\n\tsetKeyboardControls(definitions: KeyboardControlDefinition,\r\n\t\t\t\t\t\t\t\t\t\t\tkeyMappingFn?: (keyEvent: KeyboardEvent) => string,\r\n\t\t\t\t\t\t\t\t\t\t\toutsideOfAngularZone = false) {\r\n\t\tif (!definitions) {\r\n\t\t\treturn this.removeKeyboardControls();\r\n\t\t}\r\n\t\t\r\n\t\tif (!this._currentDefinitions) {\r\n\t\t\tthis.registerEvents(outsideOfAngularZone);\r\n\t\t}\r\n\t\t\r\n\t\tthis._currentDefinitions = definitions;\r\n\t\tthis._keyMappingFn = keyMappingFn || this.defaultKeyMappingFn;\r\n\t\t\r\n\t\tObject.keys(this._currentDefinitions).forEach(key => {\r\n\t\t\tthis._activeDefinitions[key] = {\r\n\t\t\t\tstate : KeyEventState.NOT_PRESSED,\r\n\t\t\t\taction : null,\r\n\t\t\t\tkeyboardEvent : null,\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Removes the current set of keyboard control items, and unregister from map events.\r\n\t */\r\n\tremoveKeyboardControls() {\r\n\t\tthis.unregisterEvents();\r\n\t\tthis._currentDefinitions = null;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Returns the current action that handles `char` key string, or `null` if not exists\r\n\t * @param {string} char\r\n\t */\r\n\tprivate getAction(char: string): KeyboardControlParams {\r\n\t\treturn this._currentDefinitions[char] || null;\r\n\t}\r\n\t\r\n\t/**\r\n\t * The default `defaultKeyMappingFn` that maps `KeyboardEvent` into a key string.\r\n\t * @param {KeyboardEvent} keyEvent\r\n\t */\r\n\tprivate defaultKeyMappingFn(keyEvent: KeyboardEvent): string {\r\n\t\treturn String.fromCharCode(keyEvent.keyCode);\r\n\t}\r\n\t\r\n\t/**\r\n\t * document's `keydown` event handler\r\n\t * @param {KeyboardEvent} e\r\n\t */\r\n\tprivate handleKeydown(e: KeyboardEvent) {\r\n\t\tconst char = this._keyMappingFn(e);\r\n\t\tconst action = this.getAction(char);\r\n\t\t\r\n\t\tif (action) {\r\n\t\t\tconst actionState = this._activeDefinitions[char];\r\n\t\t\t\r\n\t\t\tif (actionState.state !== KeyEventState.IGNORED) {\r\n\t\t\t\tlet execute = true;\r\n\t\t\t\t\r\n\t\t\t\tconst params = this.getParams(action.params, e);\r\n\t\t\t\t\r\n\t\t\t\tif (action.validation) {\r\n\t\t\t\t\texecute = action.validation(this.cesiumService, params, e);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (execute === true) {\r\n\t\t\t\t\tthis._activeDefinitions[char] = {\r\n\t\t\t\t\t\tstate : KeyEventState.PRESSED,\r\n\t\t\t\t\t\taction,\r\n\t\t\t\t\t\tkeyboardEvent : e,\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * document's `keyup` event handler\r\n\t * @param {KeyboardEvent} e\r\n\t */\r\n\tprivate handleKeyup(e: KeyboardEvent) {\r\n\t\tconst char = this._keyMappingFn(e);\r\n\t\tconst action = this.getAction(char);\r\n\t\t\r\n\t\tif (action) {\r\n\t\t\tthis._activeDefinitions[char] = {\r\n\t\t\t\tstate : KeyEventState.NOT_PRESSED,\r\n\t\t\t\taction : null,\r\n\t\t\t\tkeyboardEvent : e,\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tif (action.done && typeof action.done === 'function') {\r\n\t\t\t\taction.done(this.cesiumService, e);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * `tick` event handler that triggered by Cesium render loop\r\n\t */\r\n\tprivate handleTick() {\r\n\t\tconst activeKeys = Object.keys(this._activeDefinitions);\r\n\t\t\r\n\t\tactiveKeys.forEach(key => {\r\n\t\t\tconst actionState = this._activeDefinitions[key];\r\n\t\t\t\r\n\t\t\tif (actionState !== null && actionState.action !== null && actionState.state === KeyEventState.PRESSED) {\r\n\t\t\t\tthis.executeAction(actionState.action, key, actionState.keyboardEvent);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t * Params resolve function, returns object.\r\n\t * In case of params function, executes it and returns it's return value.\r\n\t * @param {any} paramsDef\r\n\t * @param {KeyboardEvent} keyboardEvent\r\n\t *\r\n\t * @returns {object}\r\n\t */\r\n\tprivate getParams(paramsDef: any, keyboardEvent: KeyboardEvent): { [paramName: string]: any } {\r\n\t\tif (!paramsDef) {\r\n\t\t\treturn {};\r\n\t\t}\r\n\t\t\r\n\t\tif (typeof paramsDef === 'function') {\r\n\t\t\treturn paramsDef(this.cesiumService, keyboardEvent);\r\n\t\t}\r\n\t\t\r\n\t\treturn paramsDef;\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t * Executes a given `KeyboardControlParams` object.\r\n\t *\r\n\t * @param {KeyboardControlParams} execution\r\n\t * @param {string} key\r\n\t * @param {KeyboardEvent} keyboardEvent\r\n\t *\r\n\t */\r\n\tprivate executeAction(execution: KeyboardControlParams, key: string, keyboardEvent: KeyboardEvent) {\r\n\t\tif (!this._currentDefinitions) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tconst params = this.getParams(execution.params, keyboardEvent);\r\n\t\t\r\n\t\tif (isNumber(execution.action)) {\r\n\t\t\tconst predefinedAction = PREDEFINED_KEYBOARD_ACTIONS[execution.action as number];\r\n\t\t\t\r\n\t\t\tif (predefinedAction) {\r\n\t\t\t\tpredefinedAction(this.cesiumService, params, keyboardEvent);\r\n\t\t\t}\r\n\t\t} else if (typeof execution.action === 'function') {\r\n\t\t\tconst shouldCancelEvent = execution.action(this.cesiumService, params, keyboardEvent);\r\n\t\t\t\r\n\t\t\tif (shouldCancelEvent === false) {\r\n\t\t\t\tthis._activeDefinitions[key] = {\r\n\t\t\t\t\tstate : KeyEventState.IGNORED,\r\n\t\t\t\t\taction : null,\r\n\t\t\t\t\tkeyboardEvent : null,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Registers to keydown, keyup of `document`, and `tick` of Cesium.\r\n\t */\r\n\tprivate registerEvents(outsideOfAngularZone: boolean) {\r\n\t\tconst registerToEvents = () => {\r\n\t\t\tthis.document.addEventListener('keydown', this.handleKeydown);\r\n\t\t\tthis.document.addEventListener('keyup', this.handleKeyup);\r\n\t\t\tthis.cesiumService.getViewer().clock.onTick.addEventListener(this.handleTick);\r\n\t\t};\r\n\t\t\r\n\t\tif (outsideOfAngularZone) {\r\n\t\t\tthis.ngZone.runOutsideAngular(registerToEvents);\r\n\t\t} else {\r\n\t\t\tregisterToEvents();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Unregisters to keydown, keyup of `document`, and `tick` of Cesium.\r\n\t */\r\n\tprivate unregisterEvents() {\r\n\t\tthis.document.removeEventListener('keydown', this.handleKeydown);\r\n\t\tthis.document.removeEventListener('keyup', this.handleKeyup);\r\n\t\tthis.cesiumService.getViewer().clock.onTick.removeEventListener(this.handleTick);\r\n\t}\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: CesiumService, },\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}