{"version":3,"sources":["predefined-actions.ts"],"names":[],"mappings":"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","file":"predefined-actions.js","sourceRoot":"","sourcesContent":["import { KeyboardAction } from '../../models/ac-keyboard-action.enum';\r\nimport { KeyboardControlActionFn } from './keyboard-control.service';\r\nimport { CesiumService } from '../cesium/cesium.service';\r\n\r\nconst CAMERA_MOVEMENT_DEFAULT_FACTOR = 100.0;\r\nconst CAMERA_LOOK_DEFAULT_FACTOR = 0.01;\r\nconst CAMERA_TWIST_DEFAULT_FACTOR = 0.01;\r\nconst CAMERA_ROTATE_DEFAULT_FACTOR = 0.01;\r\n\r\nexport const PREDEFINED_KEYBOARD_ACTIONS: {[key: number]: KeyboardControlActionFn} = {\r\n  /**\r\n   * Moves the camera forward, accepts a numeric parameter named `moveRate` that controls\r\n   * the factor of movement, according to the camera height.\r\n   */\r\n  [KeyboardAction.CAMERA_FORWARD]: (cesiumService: CesiumService, params: any) => {\r\n    const camera = cesiumService.getViewer().camera;\r\n    const scene = cesiumService.getScene();\r\n    const cameraHeight = scene.globe.ellipsoid.cartesianToCartographic(camera.position).height;\r\n    const moveRate = cameraHeight / (params.moveRate || CAMERA_MOVEMENT_DEFAULT_FACTOR);\r\n    camera.moveForward(moveRate);\r\n  },\r\n  /**\r\n   * Moves the camera backward, accepts a numeric parameter named `moveRate` that controls\r\n   * the factor of movement, according to the camera height.\r\n   */\r\n  [KeyboardAction.CAMERA_BACKWARD]: (cesiumService: CesiumService, params: any) => {\r\n    const camera = cesiumService.getViewer().camera;\r\n    const scene = cesiumService.getScene();\r\n    const cameraHeight = scene.globe.ellipsoid.cartesianToCartographic(camera.position).height;\r\n    const moveRate = cameraHeight / (params.moveRate || CAMERA_MOVEMENT_DEFAULT_FACTOR);\r\n    camera.moveBackward(moveRate);\r\n  },\r\n  /**\r\n   * Moves the camera up, accepts a numeric parameter named `moveRate` that controls\r\n   * the factor of movement, according to the camera height.\r\n   */\r\n  [KeyboardAction.CAMERA_UP]: (cesiumService: CesiumService, params: any) => {\r\n    const camera = cesiumService.getViewer().camera;\r\n    const scene = cesiumService.getScene();\r\n    const cameraHeight = scene.globe.ellipsoid.cartesianToCartographic(camera.position).height;\r\n    const moveRate = cameraHeight / (params.moveRate || CAMERA_MOVEMENT_DEFAULT_FACTOR);\r\n    camera.moveUp(moveRate);\r\n  },\r\n  /**\r\n   * Moves the camera down, accepts a numeric parameter named `moveRate` that controls\r\n   * the factor of movement, according to the camera height.\r\n   */\r\n  [KeyboardAction.CAMERA_DOWN]: (cesiumService: CesiumService, params: any) => {\r\n    const camera = cesiumService.getViewer().camera;\r\n    const scene = cesiumService.getScene();\r\n    const cameraHeight = scene.globe.ellipsoid.cartesianToCartographic(camera.position).height;\r\n    const moveRate = cameraHeight / (params.moveRate || CAMERA_MOVEMENT_DEFAULT_FACTOR);\r\n    camera.moveDown(moveRate);\r\n  },\r\n  /**\r\n   * Moves the camera right, accepts a numeric parameter named `moveRate` that controls\r\n   * the factor of movement, according to the camera height.\r\n   */\r\n  [KeyboardAction.CAMERA_RIGHT]: (cesiumService: CesiumService, params: any) => {\r\n    const camera = cesiumService.getViewer().camera;\r\n    const scene = cesiumService.getScene();\r\n    const cameraHeight = scene.globe.ellipsoid.cartesianToCartographic(camera.position).height;\r\n    const moveRate = cameraHeight / (params.moveRate || CAMERA_MOVEMENT_DEFAULT_FACTOR);\r\n    camera.moveRight(moveRate);\r\n  },\r\n  /**\r\n   * Moves the camera left, accepts a numeric parameter named `moveRate` that controls\r\n   * the factor of movement, according to the camera height.\r\n   */\r\n  [KeyboardAction.CAMERA_LEFT]: (cesiumService: CesiumService, params: any) => {\r\n    const camera = cesiumService.getViewer().camera;\r\n    const scene = cesiumService.getScene();\r\n    const cameraHeight = scene.globe.ellipsoid.cartesianToCartographic(camera.position).height;\r\n    const moveRate = cameraHeight / (params.moveRate || CAMERA_MOVEMENT_DEFAULT_FACTOR);\r\n    camera.moveLeft(moveRate);\r\n  },\r\n  /**\r\n   * Changes the camera to look to the right, accepts a numeric parameter named `lookFactor` that controls\r\n   * the factor of looking, according to the camera current position.\r\n   */\r\n  [KeyboardAction.CAMERA_LOOK_RIGHT]: (cesiumService: CesiumService, params: any) => {\r\n    const camera = cesiumService.getViewer().camera;\r\n    const currentPosition = camera.positionCartographic;\r\n    const lookFactor = params.lookFactor || CAMERA_LOOK_DEFAULT_FACTOR;\r\n    camera.lookRight(currentPosition.latitude * lookFactor);\r\n  },\r\n  /**\r\n   * Changes the camera to look to the left, accepts a numeric parameter named `lookFactor` that controls\r\n   * the factor of looking, according to the camera current position.\r\n   */\r\n  [KeyboardAction.CAMERA_LOOK_LEFT]: (cesiumService: CesiumService, params: any) => {\r\n    const camera = cesiumService.getViewer().camera;\r\n    const currentPosition = camera.positionCartographic;\r\n    const lookFactor = params.lookFactor || CAMERA_LOOK_DEFAULT_FACTOR;\r\n    camera.lookLeft(currentPosition.latitude * lookFactor);\r\n  },\r\n  /**\r\n   * Changes the camera to look up, accepts a numeric parameter named `lookFactor` that controls\r\n   * the factor of looking, according to the camera current position.\r\n   */\r\n  [KeyboardAction.CAMERA_LOOK_UP]: (cesiumService: CesiumService, params: any) => {\r\n    const camera = cesiumService.getViewer().camera;\r\n    const currentPosition = camera.positionCartographic;\r\n    const lookFactor = params.lookFactor || CAMERA_LOOK_DEFAULT_FACTOR;\r\n    camera.lookUp(currentPosition.longitude * (lookFactor * -1));\r\n  },\r\n  /**\r\n   * Changes the camera to look down, accepts a numeric parameter named `lookFactor` that controls\r\n   * the factor of looking, according to the camera current position.\r\n   */\r\n  [KeyboardAction.CAMERA_LOOK_DOWN]: (cesiumService: CesiumService, params: any) => {\r\n    const camera = cesiumService.getViewer().camera;\r\n    const currentPosition = camera.positionCartographic;\r\n    const lookFactor = params.lookFactor || CAMERA_LOOK_DEFAULT_FACTOR;\r\n    camera.lookDown(currentPosition.longitude * (lookFactor * -1));\r\n  },\r\n  /**\r\n   * Twists the camera to the right, accepts a numeric parameter named `amount` that controls\r\n   * the twist amount\r\n   */\r\n  [KeyboardAction.CAMERA_TWIST_RIGHT]: (cesiumService: CesiumService, params: any) => {\r\n    const camera = cesiumService.getViewer().camera;\r\n    const lookFactor = params.amount || CAMERA_TWIST_DEFAULT_FACTOR;\r\n    camera.twistRight(lookFactor);\r\n  },\r\n  /**\r\n   * Twists the camera to the left, accepts a numeric parameter named `amount` that controls\r\n   * the twist amount\r\n   */\r\n  [KeyboardAction.CAMERA_TWIST_LEFT]: (cesiumService: CesiumService, params: any) => {\r\n    const camera = cesiumService.getViewer().camera;\r\n    const lookFactor = params.amount || CAMERA_TWIST_DEFAULT_FACTOR;\r\n    camera.twistLeft(lookFactor);\r\n  },\r\n  /**\r\n   * Rotates the camera to the right, accepts a numeric parameter named `angle` that controls\r\n   * the rotation angle\r\n   */\r\n  [KeyboardAction.CAMERA_ROTATE_RIGHT]: (cesiumService: CesiumService, params: any) => {\r\n    const camera = cesiumService.getViewer().camera;\r\n    const lookFactor = params.angle || CAMERA_ROTATE_DEFAULT_FACTOR;\r\n    camera.rotateRight(lookFactor);\r\n  },\r\n  /**\r\n   * Rotates the camera to the left, accepts a numeric parameter named `angle` that controls\r\n   * the rotation angle\r\n   */\r\n  [KeyboardAction.CAMERA_ROTATE_LEFT]: (cesiumService: CesiumService, params: any) => {\r\n    const camera = cesiumService.getViewer().camera;\r\n    const lookFactor = params.angle || CAMERA_ROTATE_DEFAULT_FACTOR;\r\n    camera.rotateLeft(lookFactor);\r\n  },\r\n  /**\r\n   * Rotates the camera upwards, accepts a numeric parameter named `angle` that controls\r\n   * the rotation angle\r\n   */\r\n  [KeyboardAction.CAMERA_ROTATE_UP]: (cesiumService: CesiumService, params: any) => {\r\n    const camera = cesiumService.getViewer().camera;\r\n    const lookFactor = params.angle || CAMERA_ROTATE_DEFAULT_FACTOR;\r\n    camera.rotateUp(lookFactor);\r\n  },\r\n  /**\r\n   * Rotates the camera downwards, accepts a numeric parameter named `angle` that controls\r\n   * the rotation angle\r\n   */\r\n  [KeyboardAction.CAMERA_ROTATE_DOWN]: (cesiumService: CesiumService, params: any) => {\r\n    const camera = cesiumService.getViewer().camera;\r\n    const lookFactor = params.angle || CAMERA_ROTATE_DEFAULT_FACTOR;\r\n    camera.rotateDown(lookFactor);\r\n  },\r\n  /**\r\n   * Zoom in into the current camera center position, accepts a numeric parameter named\r\n   * `amount` that controls the amount of zoom in meters.\r\n   */\r\n  [KeyboardAction.CAMERA_ZOOM_IN]: (cesiumService: CesiumService, params: any) => {\r\n    const camera = cesiumService.getViewer().camera;\r\n    const amount = params.amount;\r\n    camera.zoomIn(amount);\r\n  },\r\n  /**\r\n   * Zoom out from the current camera center position, accepts a numeric parameter named\r\n   * `amount` that controls the amount of zoom in meters.\r\n   */\r\n  [KeyboardAction.CAMERA_ZOOM_OUT]: (cesiumService: CesiumService, params: any) => {\r\n    const camera = cesiumService.getViewer().camera;\r\n    const amount = params.amount;\r\n    camera.zoomOut(amount);\r\n  },\r\n};\r\n"]}