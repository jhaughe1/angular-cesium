{"version":3,"sources":["cesium.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAY,MAAA,EAAQ,QAAA,EAAS,MAAO,eAAA,CAAgB;AAC7D,OAAO,EAAE,aAAA,EAAc,MAAO,0CAAA,CAA2C;AACzE,OAAO,EAAE,mBAAA,EAAoB,MAAO,sDAAA,CAAuD;AAM3F;IAGE,uBAAoB,MAAc,EAAU,aAA4B,EAAW,mBAAwC;QAAvG,WAAM,GAAN,MAAM,CAAQ;QAAU,kBAAa,GAAb,aAAa,CAAe;QAAW,wBAAmB,GAAnB,mBAAmB,CAAqB;IAC3H,CAAC;IAED,4BAAI,GAAJ,UAAK,YAAyB;QAA9B,iBAUC;QATC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;YAC5B,IAAM,OAAO,GAAG,KAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,KAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC;YAC9F,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,aAAa,CAAC,YAAY,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;YAE3E,EAAE,CAAC,CAAC,KAAI,CAAC,mBAAmB,IAAI,KAAI,CAAC,mBAAmB,CAAC,cAAc;gBACrE,OAAO,KAAI,CAAC,mBAAmB,CAAC,cAAc,KAAK,UAAU,CAAC,CAAC,CAAC;gBAChE,KAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;YAC7D,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAMD,iCAAS,GAAT;QACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAMD,gCAAQ,GAAR;QACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;IACjC,CAAC;IAMD,iCAAS,GAAT;QACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,MAA2B,CAAC;IACvD,CAAC;IACI,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IAEK,4BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,MAAM,GAAG;QAChB,EAAC,IAAI,EAAE,aAAa,GAAG;QACvB,EAAC,IAAI,EAAE,mBAAmB,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAG,EAAC;KAC9D,EAJ6F,CAI7F,CAAC;IACF,oBAAC;CAlDD,AAkDC,IAAA;SAlDY,aAAa","file":"cesium.service.js","sourceRoot":"","sourcesContent":["import { Injectable, NgZone, Optional } from '@angular/core';\r\nimport { ViewerFactory } from '../viewer-factory/viewer-factory.service';\r\nimport { ViewerConfiguration } from '../viewer-configuration/viewer-configuration.service';\r\n\r\n/**\r\n *  Service that initialize cesium viewer and expose cesium viewer and scene.\r\n */\r\n\r\nexport class CesiumService {\r\n  private cesiumViewer: any;\r\n\r\n  constructor(private ngZone: NgZone, private viewerFactory: ViewerFactory,  private viewerConfiguration: ViewerConfiguration) {\r\n  }\r\n\r\n  init(mapContainer: HTMLElement) {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      const options = this.viewerConfiguration ? this.viewerConfiguration.viewerOptions : undefined;\r\n      this.cesiumViewer = this.viewerFactory.createViewer(mapContainer, options);\r\n\r\n      if (this.viewerConfiguration && this.viewerConfiguration.viewerModifier &&\r\n        typeof this.viewerConfiguration.viewerModifier === 'function') {\r\n        this.viewerConfiguration.viewerModifier(this.cesiumViewer);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * For more information see https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html?classFilter=viewe\r\n   * @returns {any}\r\n   */\r\n  getViewer() {\r\n    return this.cesiumViewer;\r\n  }\r\n\r\n  /**\r\n   * For more information see https://cesiumjs.org/Cesium/Build/Documentation/Scene.html?classFilter=scene\r\n   * @returns {{Scene}|any}\r\n   */\r\n  getScene() {\r\n    return this.cesiumViewer.scene;\r\n  }\r\n\r\n  /**\r\n   * For more information see https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\r\n   * @returns {{HTMLCanvasElement}|any}\r\n   */\r\n  getCanvas(): HTMLCanvasElement {\r\n    return this.cesiumViewer.canvas as HTMLCanvasElement;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: ViewerFactory, },\n{type: ViewerConfiguration, decorators: [{ type: Optional }, ]},\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}