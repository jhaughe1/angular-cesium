{"version":3,"sources":["static-polyline-drawer.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,aAAA,EAAc,MAAO,gCAAA,CAAiC;AAC/D,OAAO,EAAE,qBAAA,EAAsB,MAAO,4DAAA,CAA6D;AAOnG;IAAiD,+CAAqB;IACrE,qCAAY,aAA4B;eACvC,kBAAM,MAAM,CAAC,gBAAgB,EAAE,aAAa,CAAC;IAC9C,CAAC;IAUD,4CAAM,GAAN,UAAO,SAAc,EAAE,aAAkB,EAAE,aAAkB,EAAE,cAAmB;QACjF,IAAM,KAAK,GAAG,aAAa,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC;QAEnD,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;YACrB,SAAS,CAAC,6BAA6B,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC;QACzD,CAAC;QACD,IAAI,CAAC,CAAC;YACL,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,UAAC,cAAmB;gBAC5D,cAAc,CAAC,6BAA6B,EAAE,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;YACpE,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,MAAM,CAAC,SAAS,CAAC;IAClB,CAAC;IACK,sCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IAEK,0CAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,aAAa,GAAG;KACtB,EAF6F,CAE7F,CAAC;IACF,kCAAC;CAlCD,AAkCC,CAlCgD,qBAAqB,GAkCrE;SAlCY,2BAA2B","file":"static-polyline-drawer.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CesiumService } from '../../../cesium/cesium.service';\r\nimport { StaticPrimitiveDrawer } from '../static-primitive-drawer/static-primitive-drawer.service';\r\n\r\n/**\r\n *  This drawer is responsible for creating the static version of the polyline component.\r\n *  This also allows us to change the color of the polylines.\r\n */\r\n\r\nexport class StaticPolylineDrawerService extends StaticPrimitiveDrawer {\r\n\tconstructor(cesiumService: CesiumService) {\r\n\t\tsuper(Cesium.PolylineGeometry, cesiumService);\r\n\t}\r\n\r\n\t/**\r\n\t * Update function can only change the primitive color.\r\n\t * @param primitive\r\n\t * @param geometryProps\r\n\t * @param instanceProps\r\n\t * @param primitiveProps\r\n\t * @returns {any}\r\n\t */\r\n\tupdate(primitive: any, geometryProps: any, instanceProps: any, primitiveProps: any) {\r\n\t\tconst color = instanceProps.attributes.color.value;\r\n\r\n\t\tif (primitive.ready) {\r\n\t\t\tprimitive.getGeometryInstanceAttributes().color = color;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tCesium.when(primitive.readyPromise).then((readyPrimitive: any) => {\r\n\t\t\t\treadyPrimitive.getGeometryInstanceAttributes().color.value = color;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn primitive;\r\n\t}\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CesiumService, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}