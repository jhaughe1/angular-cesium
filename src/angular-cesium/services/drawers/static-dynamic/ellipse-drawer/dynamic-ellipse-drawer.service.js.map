{"version":3,"sources":["dynamic-ellipse-drawer.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,aAAA,EAAc,MAAO,gCAAA,CAAiC;AAC/D,OAAO,EAAE,OAAA,EAAQ,MAAO,2BAAA,CAA4B;AACpD,OAAO,EAAE,gBAAA,EAAiB,MAAO,sBAAA,CAAuB;AACxD,OAAO,EAAE,uBAAA,EAAwB,MAAO,mDAAA,CAAoD;AAU5F;IAAiD,+CAAuB;IACtE,qCAAY,aAA4B;eACtC,kBAAM,MAAM,CAAC,mBAAmB,EAAE,aAAa,CAAC;IAClD,CAAC;IAED,yCAAG,GAAH,UAAI,WAAgB;QAClB,OAAO,CAAC,oBAAoB,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC,CAAC;QAExF,MAAM,CAAC,iBAAM,GAAG,YAAC,IAAI,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;IACtD,CAAC;IAED,4CAAM,GAAN,UAAO,OAAY,EAAE,WAAgB;QACnC,OAAO,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;QAExC,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IACI,sCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IAEK,0CAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,aAAa,GAAG;KACtB,EAF6F,CAE7F,CAAC;IACF,kCAAC;CAvBD,AAuBC,CAvBgD,uBAAuB,GAuBvE;SAvBY,2BAA2B","file":"dynamic-ellipse-drawer.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CesiumService } from '../../../cesium/cesium.service';\r\nimport { Checker } from '../../../../utils/checker';\r\nimport { EllipsePrimitive } from 'primitive-primitives';\r\nimport { PrimitivesDrawerService } from '../../primitives-drawer/primitives-drawer.service';\r\n\r\n\r\n/**\r\n *  This drawer is responsible for creating the dynamic version of the ellipse component.\r\n *  We are using the primitive-primitives implementation of an ellipse. see: https://github.com/gotenxds/Primitive-primitives\r\n *  This allows us to change the position of the ellipses without creating a new primitive object\r\n *  as Cesium does not allow updating an ellipse.\r\n */\r\n\r\nexport class DynamicEllipseDrawerService extends PrimitivesDrawerService {\r\n  constructor(cesiumService: CesiumService) {\r\n    super(Cesium.PrimitiveCollection, cesiumService);\r\n  }\r\n  \r\n  add(cesiumProps: any): any {\r\n    Checker.throwIfAnyNotPresent(cesiumProps, ['center', 'semiMajorAxis', 'semiMinorAxis']);\r\n    \r\n    return super.add(new EllipsePrimitive(cesiumProps));\r\n  }\r\n  \r\n  update(ellipse: any, cesiumProps: any): any {\r\n    ellipse.updateLocationData(cesiumProps);\r\n    \r\n    return ellipse;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CesiumService, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}