{"version":3,"sources":["polyline-primitive-drawer.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,aAAA,EAAc,MAAO,6BAAA,CAA8B;AAC5D,OAAO,EAAE,uBAAA,EAAwB,MAAO,gDAAA,CAAiD;AAOzF;IAAoD,kDAAuB;IACzE,wCAAY,aAA4B;eACtC,kBAAM,MAAM,CAAC,kBAAkB,EAAE,aAAa,CAAC;IACjD,CAAC;IAED,4CAAG,GAAH,UAAI,WAAgB;QAClB,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC;IACzE,CAAC;IAED,+CAAM,GAAN,UAAO,YAAiB,EAAE,WAAgB;QACxC,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,YAAY,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACjD,EAAE,CAAC,CAAC,YAAY,CAAC,QAAQ,IAAI,YAAY,CAAC,QAAQ,CAAC,QAAQ;gBACzD,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,YAAY,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC/D,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YACtC,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAC5E,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,GAAG,WAAW,CAAC,QAAQ,CAAC;YAC9D,CAAC;QACH,CAAC;QACD,iBAAM,MAAM,YAAC,YAAY,EAAE,WAAW,CAAC,CAAC;IAC1C,CAAC;IAED,0DAAiB,GAAjB,UAAkB,WAAgB;QAChC,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,YAAY,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACjD,IAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YACnD,QAAQ,CAAC,QAAQ,CAAC,KAAK,GAAG,WAAW,CAAC,QAAQ,CAAC;YAC/C,WAAW,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAClC,CAAC;QAED,MAAM,CAAC,WAAW,CAAC;IACrB,CAAC;IACI,yCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IAEK,6CAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,aAAa,GAAG;KACtB,EAF6F,CAE7F,CAAC;IACF,qCAAC;CAtCD,AAsCC,CAtCmD,uBAAuB,GAsC1E;SAtCY,8BAA8B","file":"polyline-primitive-drawer.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CesiumService } from '../../cesium/cesium.service';\r\nimport { PrimitivesDrawerService } from '../primitives-drawer/primitives-drawer.service';\r\n\r\n/**\r\n *  This drawer is responsible of drawing polylines as primitives.\r\n *  This drawer is more efficient than PolylineDrawerService when drawing dynamic polylines.\r\n */\r\n\r\nexport class PolylinePrimitiveDrawerService extends PrimitivesDrawerService {\r\n  constructor(cesiumService: CesiumService) {\r\n    super(Cesium.PolylineCollection, cesiumService);\r\n  }\r\n\r\n  add(cesiumProps: any) {\r\n    return this._cesiumCollection.add(this.withColorMaterial(cesiumProps));\r\n  }\r\n\r\n  update(cesiumObject: any, cesiumProps: any) {\r\n    if (cesiumProps.material instanceof Cesium.Color) {\r\n      if (cesiumObject.material && cesiumObject.material.uniforms &&\r\n        cesiumObject.material.uniforms.color instanceof Cesium.Color) {\r\n        this.withColorMaterial(cesiumProps);\r\n      }\r\n      else if (!cesiumObject.material.uniforms.color.equals(cesiumProps.material)) {\r\n        cesiumObject.material.uniforms.color = cesiumProps.material;\r\n      }\r\n    }\r\n    super.update(cesiumObject, cesiumProps);\r\n  }\r\n\r\n  withColorMaterial(cesiumProps: any) {\r\n    if (cesiumProps.material instanceof Cesium.Color) {\r\n      const material = Cesium.Material.fromType('Color');\r\n      material.uniforms.color = cesiumProps.material;\r\n      cesiumProps.material = material;\r\n    }\r\n\r\n    return cesiumProps;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CesiumService, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}