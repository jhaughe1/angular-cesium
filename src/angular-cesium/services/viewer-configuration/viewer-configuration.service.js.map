{"version":3,"sources":["viewer-configuration.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAe3C;IAAA;IA6BA,CAAC;IArBC,sBAAI,8CAAa;aAAjB;YACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;QAC7B,CAAC;aAED,UAAkB,KAAU;YAC1B,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC9B,CAAC;;;OAJA;IAMD,sBAAI,+CAAc;aAAlB;YACE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;QAC9B,CAAC;aAED,UAAmB,KAAe;YAChC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAC/B,CAAC;;;OAJA;IAKI,8BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IAEK,kCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,0BAAC;CA7BD,AA6BC,IAAA;SA7BY,mBAAmB","file":"viewer-configuration.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Service for setting cesium viewer map options.\r\n * defaulty angular-cesium doesnt provide this service and viewer is created with default options.\r\n * In order set specific options you must set this service as provider in your component and\r\n * set the wanted options.\r\n * ```typescript\r\n * constructor(viewerConf :ViewerConfiguration ){\r\n  *   viewerConf.viewerOptions = { timeline: false };\r\n  * }\r\n * ```\r\n * notice this configuration will be for all <ac-maps> in your component.\r\n */\r\n\r\nexport class ViewerConfiguration {\r\n\r\n  /**\r\n   * cesium viewer options According to [Viewer]{@link https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html?classFilter=vie}\r\n   */\r\n  private _viewerOptions: any;\r\n  private _viewerModifier: Function;\r\n\r\n  get viewerOptions(): any {\r\n    return this._viewerOptions;\r\n  }\r\n\r\n  set viewerOptions(value: any) {\r\n    this._viewerOptions = value;\r\n  }\r\n\r\n  get viewerModifier(): Function {\r\n    return this._viewerModifier;\r\n  }\r\n\r\n  set viewerModifier(value: Function) {\r\n    this._viewerModifier = value;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}