{"version":3,"sources":["camera.service.ts"],"names":[],"mappings":"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","file":"camera.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CesiumService } from '../cesium/cesium.service';\r\nimport { SceneMode } from '../../models/scene-mode.enum';\r\n\r\n/**\r\n *  The service exposes the scene's camera and screenSpaceCameraController\r\n *  SceneMode.PERFORMANCE_SCENE2D -  is a 3D scene mode that acts like Cesium 2D mode,\r\n *  but is more efficient performance wise.\r\n */\r\n\r\nexport class CameraService {\r\n  static PERFORMANCE_2D_ALTITUDE = 25000000;\r\n\r\n  private viewer: any;\r\n  private scene: any;\r\n  private camera: any;\r\n  private screenSpaceCameraController: any;\r\n  private morphListenerCancelFn: any;\r\n  private lastRotate: boolean;\r\n  private lastTilt: boolean;\r\n  private lastLook: boolean;\r\n  private isSceneModePerformance2D = false;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  init(cesiumService: CesiumService) {\r\n    this.viewer = cesiumService.getViewer();\r\n    this.scene = cesiumService.getScene();\r\n    this.screenSpaceCameraController = this.scene.screenSpaceCameraController;\r\n    this.camera = this.scene.camera;\r\n    this.lastRotate = this.screenSpaceCameraController.enableRotate;\r\n    this.lastTilt = this.screenSpaceCameraController.enableTilt;\r\n    this.lastLook = this.screenSpaceCameraController.enableLook;\r\n  }\r\n\r\n  _listenToSceneModeMorph(callback: Function) {\r\n    this.morphListenerCancelFn = this.scene.morphStart.addEventListener(callback);\r\n  }\r\n\r\n\r\n  _revertCameraProperties() {\r\n    this.isSceneModePerformance2D = false;\r\n    this.enableTilt(this.lastTilt);\r\n    this.enableRotate(this.lastRotate);\r\n    this.enableLook(this.lastLook);\r\n  }\r\n\r\n  /**\r\n   * Gets the scene's camera\r\n   * @returns {number}\r\n   */\r\n  getCamera() {\r\n    return this.camera;\r\n  }\r\n\r\n  /**\r\n   * Gets the scene's screenSpaceCameraController\r\n   * @returns {number}\r\n   */\r\n  getScreenSpaceCameraController() {\r\n    return this.screenSpaceCameraController;\r\n  }\r\n\r\n  /**\r\n   * Gets the minimum zoom value in meters\r\n   * @returns {number}\r\n   */\r\n  getMinimumZoom(): number {\r\n    return this.screenSpaceCameraController.minimumZoomDistance;\r\n  }\r\n\r\n  /**\r\n   * Sets the minimum zoom value in meters\r\n   * @param {number} amount\r\n   */\r\n  setMinimumZoom(amount: number): void {\r\n    this.screenSpaceCameraController.minimumZoomDistance = amount;\r\n  }\r\n\r\n  /**\r\n   * Gets the maximum zoom value in meters\r\n   * @returns {number}\r\n   */\r\n  getMaximumZoom(): number {\r\n    return this.screenSpaceCameraController.maximumZoomDistance;\r\n  }\r\n\r\n  /**\r\n   * Sets the maximum zoom value in meters\r\n   * @param {number} amount\r\n   */\r\n  setMaximumZoom(amount: number): void {\r\n    this.screenSpaceCameraController.maximumZoomDistance = amount;\r\n  }\r\n\r\n  /**\r\n   * Sets if the camera is able to tilt\r\n   * @param {boolean} tilt\r\n   */\r\n  enableTilt(tilt: boolean): void {\r\n    this.screenSpaceCameraController.enableTilt = tilt;\r\n  }\r\n\r\n  /**\r\n   * Sets if the camera is able to rotate\r\n   * @param {boolean} rotate\r\n   */\r\n  enableRotate(rotate: boolean): void {\r\n    this.screenSpaceCameraController.enableRotate = rotate;\r\n  }\r\n\r\n  /**\r\n   * Sets if the camera is able to free-look\r\n   * @param {boolean} lock\r\n   */\r\n  enableLook(lock: boolean): void {\r\n    this.screenSpaceCameraController.enableLook = lock;\r\n  }\r\n\r\n  /**\r\n   * Sets if the camera is able to translate\r\n   * @param {boolean} translate\r\n   */\r\n  enableTranslate(translate: boolean): void {\r\n    this.screenSpaceCameraController.enableTranslate = translate;\r\n  }\r\n\r\n  /**\r\n   * Sets if the camera is able to zoom\r\n   * @param {boolean} zoom\r\n   */\r\n  enableZoom(zoom: boolean): void {\r\n    this.screenSpaceCameraController.enableZoom = zoom;\r\n  }\r\n\r\n  /**\r\n   * Sets if the camera receives inputs\r\n   * @param {boolean} inputs\r\n   */\r\n  enableInputs(inputs: boolean): void {\r\n    this.screenSpaceCameraController.enableInputs = inputs;\r\n  }\r\n\r\n  /**\r\n   * Sets the map's SceneMode\r\n   * @param {SceneMode} sceneMode - The SceneMode to morph the scene into.\r\n   * @param {number} duration - The duration of scene morph animations, in seconds\r\n   */\r\n  setSceneMode(sceneMode: SceneMode, duration?: number) {\r\n    switch (sceneMode) {\r\n      case SceneMode.SCENE3D: {\r\n        if (this.isSceneModePerformance2D) {\r\n          this._revertCameraProperties();\r\n        }\r\n\r\n        this.scene.morphTo3D(duration);\r\n\r\n        break;\r\n      }\r\n      case SceneMode.COLUMBUS_VIEW: {\r\n        if (this.isSceneModePerformance2D) {\r\n          this._revertCameraProperties();\r\n        }\r\n\r\n        this.scene.morphToColumbusView(duration);\r\n\r\n        break;\r\n      }\r\n      case SceneMode.SCENE2D: {\r\n        if (this.isSceneModePerformance2D) {\r\n          this._revertCameraProperties();\r\n        }\r\n        this.scene.morphTo2D(duration);\r\n\r\n        break;\r\n      }\r\n      case SceneMode.PERFORMANCE_SCENE2D: {\r\n        this.isSceneModePerformance2D = true;\r\n        this.lastLook = this.screenSpaceCameraController.enableLook;\r\n        this.lastTilt = this.screenSpaceCameraController.enableTilt;\r\n        this.lastRotate = this.screenSpaceCameraController.enableRotate;\r\n        this.screenSpaceCameraController.enableTilt = false;\r\n        this.screenSpaceCameraController.enableRotate = false;\r\n        this.screenSpaceCameraController.enableLook = false;\r\n        if (this.morphListenerCancelFn) {\r\n          this.morphListenerCancelFn();\r\n        }\r\n        this.scene.morphToColumbusView(duration);\r\n        const morphCompleteEventListener = this.scene.morphComplete.addEventListener(() => {\r\n          this.camera.setView({\r\n            destination: Cesium.Cartesian3.fromDegrees(0.0, 0.0,\r\n              Math.min(CameraService.PERFORMANCE_2D_ALTITUDE, this.getMaximumZoom())),\r\n            orientation: {\r\n              pitch: Cesium.Math.toRadians(-90),\r\n            }\r\n          });\r\n          morphCompleteEventListener();\r\n          this._listenToSceneModeMorph(this._revertCameraProperties.bind(this));\r\n        });\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Flies the camera to a destination\r\n   * API: https://cesiumjs.org/Cesium/Build/Documentation/Camera.html?classFilter=cam#flyTo\r\n   * @param options\r\n   */\r\n  cameraFlyTo(options: any) {\r\n    this.camera.flyTo(options);\r\n  }\r\n\r\n  /**\r\n   * Flies the camera to a target\r\n   * API: https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html?classFilter=viewer#flyTo\r\n   * @param target\r\n   * @param options\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  flyTo(target: any, options?: any) {\r\n    return this.viewer.flyTo(target, options);\r\n  }\r\n\r\n  /**\r\n   * Zoom the camera to a target\r\n   * API: https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html?classFilter=viewer#zoomTo\r\n   * @param target\r\n   * @param offset\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  zoomTo(target: any, offset?: any) {\r\n    return this.viewer.zoomTo(target, offset);\r\n  }\r\n\r\n  /**\r\n   * Flies the camera to a destination\r\n   * API: https://cesiumjs.org/Cesium/Build/Documentation/Camera.html?classFilter=camera#setView\r\n   * @param options\r\n   */\r\n  setView(options: any) {\r\n    this.camera.setView(options);\r\n  }\r\n\r\n  /**\r\n   * Make the camera track a specific entity\r\n   * API: https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html?classFilter=viewer#trackedEntity\r\n   * @param entity\r\n   */\r\n  trackEntity(entity?: any) {\r\n    this.viewer.trackedEntity = entity;\r\n  }\r\n\r\n  untrackEntity() {\r\n    this.trackEntity();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}