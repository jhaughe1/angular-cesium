{"version":3,"sources":["plonter.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAY,YAAA,EAAa,MAAO,eAAA,CAAgB;AAEzD,OAAO,EAAE,OAAA,EAAQ,MAAO,cAAA,CAAe;AAQvC;IAOC;QALQ,sBAAiB,GAAe,EAAE,CAAC;QAGnC,2BAAsB,GAAsB,IAAI,YAAY,EAAE,CAAC;QAGtE,IAAI,CAAC,gBAAgB,GAAG,IAAI,OAAO,EAAe,CAAC;IACpD,CAAC;IAED,sBAAI,iDAAqB;aAAzB;YACC,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC;QACpC,CAAC;;;OAAA;IAED,sBAAI,wCAAY;aAAhB;YACC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC3B,CAAC;;;OAAA;IAED,sBAAI,4CAAgB;aAApB;YACC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;QAC/B,CAAC;;;OAAA;IAED,sBAAI,gDAAoB;aAAxB;YACC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;QACnC,CAAC;;;OAAA;IAED,kCAAS,GAAT,UAAU,WAAwB;QACjC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC,QAAQ,CAAC;QAC9C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAE1B,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,CAAC;QACnC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;IAC9B,CAAC;IAED,uCAAc,GAAd,UAAe,MAAgB;QAC9B,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC3B,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,CAAC,MAAM,CAAC,CAAC;QAEtC,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,CAAC;QACnC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC/C,CAAC;IACK,yBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IAEK,6BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,qBAAC;CAjDD,AAiDC,IAAA;SAjDY,cAAc","file":"plonter.service.js","sourceRoot":"","sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\r\nimport { AcEntity } from '../../models/ac-entity';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { EventResult, Movement } from '../map-events-mananger/map-events-manager';\r\n\r\n/**\r\n * Service for solving plonter.\r\n * Used by map-event-manager and plonter context component\r\n */\r\n\r\nexport class PlonterService {\r\n\tprivate _plonterShown: boolean;\r\n\tprivate _entitesToPlonter: AcEntity[] = [];\r\n\tprivate _plonterObserver: Subject<EventResult>;\r\n\tprivate _eventResult: EventResult;\r\n\tprivate _plonterChangeNotifier: EventEmitter<any> = new EventEmitter();\r\n\r\n\tconstructor() {\r\n\t\tthis._plonterObserver = new Subject<EventResult>();\r\n\t}\r\n\r\n\tget plonterChangeNotifier(): EventEmitter<any> {\r\n\t\treturn this._plonterChangeNotifier;\r\n\t}\r\n\r\n\tget plonterShown(): boolean {\r\n\t\treturn this._plonterShown;\r\n\t}\r\n\r\n\tget entitesToPlonter(): AcEntity[] {\r\n\t\treturn this._entitesToPlonter;\r\n\t}\r\n\t\r\n\tget plonterClickPosition(): Movement {\r\n\t\treturn this._eventResult.movement;\r\n\t}\r\n\r\n\tplonterIt(eventResult: EventResult) {\r\n\t\tthis._eventResult = eventResult;\r\n\t\tthis._entitesToPlonter = eventResult.entities;\r\n\t\tthis._plonterShown = true;\r\n\r\n\t\tthis._plonterChangeNotifier.emit();\r\n\t\treturn this._plonterObserver;\r\n\t}\r\n\r\n\tresolvePlonter(entity: AcEntity) {\r\n\t\tthis._plonterShown = false;\r\n\t\tthis._eventResult.entities = [entity];\r\n\r\n\t\tthis._plonterChangeNotifier.emit();\r\n\t\tthis._plonterObserver.next(this._eventResult);\r\n\t}\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}