{"version":3,"sources":["maps-manager.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAQ3C;IAME;QAJQ,qBAAgB,GAAG,CAAC,CAAC;QACrB,UAAK,GAAG,IAAI,GAAG,EAA0B,CAAC;IAIlD,CAAC;IAED,mCAAM,GAAN,UAAO,EAAW;QAChB,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACR,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC5B,CAAC;IAED,wCAAW,GAAX,UAAY,EAAU,EAAE,KAAqB;QAC3C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAA;QACvB,CAAC;QACD,IAAM,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACjD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC/B,CAAC;IAEO,8CAAiB,GAAzB;QACE,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,MAAM,CAAC,iBAAiB,GAAG,IAAI,CAAC,gBAAgB,CAAC;IACnD,CAAC;IACI,6BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IAEK,iCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,yBAAC;CAlCD,AAkCC,IAAA;SAlCY,kBAAkB","file":"maps-manager.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AcMapComponent } from '../../components/ac-map/ac-map.component';\r\n\r\n/**\r\n *  The service manages `ac-map` instances. `ac-map` register itself to this service.\r\n *  This allows retrieval of maps provided services outside of `ac-map` scope.\r\n */\r\n\r\nexport class MapsManagerService {\r\n\r\n  private defaultIdCounter = 0;\r\n  private _Maps = new Map<string, AcMapComponent>();\r\n  private firstMap: any;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  getMap(id?: string): AcMapComponent {\r\n    if (!id) {\r\n      return this.firstMap;\r\n    }\r\n    return this._Maps.get(id);\r\n  }\r\n\r\n  registerMap(id: string, acMap: AcMapComponent) {\r\n    if (!this.firstMap) {\r\n      this.firstMap = acMap\r\n    }\r\n    const mapId = id ? id : this.generateDefaultId();\r\n    this._Maps.set(mapId, acMap);\r\n  }\r\n\r\n  private generateDefaultId(): string {\r\n    this.defaultIdCounter++;\r\n    return 'default-map-id-' + this.defaultIdCounter;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}