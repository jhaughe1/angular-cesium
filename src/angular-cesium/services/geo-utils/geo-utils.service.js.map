{"version":3,"sources":["geo-utils.service.ts"],"names":[],"mappings":"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","file":"geo-utils.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CesiumService } from '../cesium/cesium.service';\r\nimport { Cartesian3 } from '../../models/cartesian3';\r\nimport { Vec3 } from '../../models/vec3';\r\n\r\n\r\nexport class GeoUtilsService {\r\n\r\n  static pointByLocationDistanceAndAzimuth(currentLocation: any, meterDistance: number, radianAzimuth: number, isInputCartesian = false) {\r\n    const distance = meterDistance / Cesium.Ellipsoid.WGS84.maximumRadius;\r\n    const curLat = isInputCartesian ? Cesium.Cartographic.fromCartesian(currentLocation).latitude : currentLocation.latitude;\r\n    const curLon = isInputCartesian ? Cesium.Cartographic.fromCartesian(currentLocation).longitude : currentLocation.longitude;\r\n\r\n    const destinationLat = Math.asin(\r\n      Math.sin(curLat) * Math.cos(distance) +\r\n      Math.cos(curLat) * Math.sin(distance) * Math.cos(radianAzimuth)\r\n    );\r\n\r\n    let destinationLon = curLon + Math.atan2(Math.sin(radianAzimuth) * Math.sin(distance) * Math.cos(curLat),\r\n      Math.cos(distance) - Math.sin(curLat) * Math.sin(destinationLat)\r\n    );\r\n\r\n    destinationLon = (destinationLon + 3 * Math.PI) % (2 * Math.PI) - Math.PI;\r\n\r\n    return Cesium.Cartesian3.fromRadians(destinationLon, destinationLat);\r\n  }\r\n\r\n  static distance(pos0: Cartesian3, pos1: Cartesian3): number {\r\n    return Cesium.Cartesian3.distance(pos0, pos1);\r\n  }\r\n\r\n  static getPositionsDelta(position0: Cartesian3, position1: Cartesian3): Vec3 {\r\n    return {\r\n      x: position1.x - position0.x,\r\n      y: position1.y - position0.y,\r\n      z: position1.z - position0.z,\r\n    }\r\n  }\r\n\r\n  static addDeltaToPosition(position: Cartesian3, delta: Vec3, keepReference = false): Cartesian3 {\r\n    if (keepReference) {\r\n      position.x += delta.x;\r\n      position.y += delta.y;\r\n      position.z += delta.z;\r\n      const cartographic = Cesium.Cartographic.fromCartesian(position);\r\n      cartographic.height = 0;\r\n      const cartesian = Cesium.Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, cartographic.height);\r\n      position.x = cartesian.x;\r\n      position.y = cartesian.y;\r\n      position.z = cartesian.z;\r\n      return position\r\n    }\r\n\r\n    else {\r\n      const cartesian = new Cesium.Cartesian3(\r\n        position.x + delta.x,\r\n        position.y + delta.y,\r\n        position.z + delta.z\r\n      );\r\n      const cartographic = Cesium.Cartographic.fromCartesian(cartesian);\r\n      cartographic.height = 0;\r\n      return Cesium.Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, cartographic.height);\r\n    }\r\n  }\r\n\r\n  static middleCartesian3Point(position0: Cartesian3, position1: Cartesian3) {\r\n    return new Cesium.Cartesian3(\r\n      position1.x - position0.x / 2,\r\n      position1.y - position0.y / 2,\r\n      position1.z - position0.z / 2\r\n    )\r\n  }\r\n\r\n  constructor(private cesiumService: CesiumService) {\r\n  }\r\n\r\n  screenPositionToCartesian3(screenPos: { x: number, y: number }) {\r\n    const camera = this.cesiumService.getViewer().camera;\r\n    return camera.pickEllipsoid(screenPos);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CesiumService, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}